<tool id="rna_star_index_builder_data_manager" name="RNA STAR index" tool_type="manage_data" version="0.0.3" profile="17.01">
    <description>builder</description>
    
    <macros>
        <import>macros.xml</import>
    </macros>
    
    <expand macro="requirements" />
    
    <command interpreter="python"><![CDATA[
        RNA_STAR_index_builder.py
            "${out_file}"
            --fasta_filename "${all_fasta_source.fields.path}" 
            --fasta_dbkey "${all_fasta_source.fields.dbkey}"
            --fasta_description "${all_fasta_source.fields.name}" 
            --runThreadN 1
            
            #if $genemodel.modelformat=="None":
                --sjdbOverhang 0
            #end if

            --data_table_name "RNA_STAR_index"
    ]]></command>
    <inputs>
        <param name="all_fasta_source"
               type="select"
               label="Source FASTA Sequence">
            <options from_data_table="all_fasta"/>
        </param>
        <param name="sequence_name"
               type="text"
               value=""
               label="Informative name for sequence index"
               help="By using different settings, you may have several indices per reference genome. Give an appropriate description to the index to distinguish between indices"/>
    </inputs>

    <outputs>
        <data name="out_file" format="data_manager_json"/>
    </outputs>

    <!-- not available in planemo at the moment of writing
    <tests>
        <test>
            <param name="all_fasta_source" value="phiX.fa"/>
            <param name="sequence_name" value="phiX"/>
            <param name="sequence_id" value="minimal-settings"/>
            <param name="modelformat" value="None"/>

            <output name="out_file" file="test_star_01.data_manager_json"/>
        </test>
    </tests>
    -->

    <help>

.. class:: infomark

<![CDATA[
*What it does*

This is a Galaxy datamanager for the rna STAR gap-aware RNA aligner.

Please read the fine manual - that and the google group are the places to learn about the options above.

*Note on sjdbOverhang*

From https://groups.google.com/forum/#!topic/rna-star/h9oh10UlvhI::

  James is right, using large enough --sjdbOverhang is safer and should not generally cause any problems with reads of varying length. If your reads are very short, &lt;50b, then I would strongly recommend using optimum --sjdbOverhang=mateLength-1
  By mate length I mean the length of one of the ends of the read, i.e. it's 100 for 2x100b PE or 1x100b SE. For longer reads you can simply use generic --sjdbOverhang 100.
  It is a bit confusing because of the way I named this parameter. --sjdbOverhang Noverhang is only used at the genome generation step  for constructing the reference sequence out of the annotations.
  Basically, the Noverhang exonic bases from the donor site and Noverhang exonic bases from the acceptor site are spliced together for each of the junctions, and these spliced sequences are added to the genome sequence.

  At the mapping stage, the reads are aligned to both genomic and splice sequences simultaneously. If a read maps to one of spliced sequences and crosses the "junction" in the middle of it, the coordinates of two pspliced pieces are translated back to genomic space and added to the collection of mapped pieces, which are then all "stitched" together to form the final alignment. Since in the process of "maximal mapped length" search the read is split into pieces of no longer than --seedSearchStartLmax (=50 by default) bases, even if the read (mate) is longer than --sjdbOverhang, it can still be mapped to the spliced reference, as long as --sjdbOverhang > --seedSearchStartLmax.

  Cheers
  Alex

*Note on gene model requirements for splice junctions*

From https://groups.google.com/forum/#!msg/rna-star/3Y_aaTuzBrE/lUylTB8h5vMJ::

    When you generate a genome with annotations, you need to specify --sjdbOverhang value, which ideally should be equal to (oneMateLength-1), or you could use a generic value of ~100.

    Your gtf lines look fine to me. STAR needs 3 features from a GTF file:
    1. Chromosome names in col.1 that agree with chromosome names in genome .fasta files. If you have "chr2L" names in the genome .fasta files, and "2L" in the .gtf file, then you need to use --sjdbGTFchrPrefix chr option.
    2. 'exon' in col.3 for the exons of all transcripts (this name can be changed with --sjdbGTFfeatureExon)
    3. 'transcript_id' attribute that assigns each exon to a transcript (--this name can be changed with --sjdbGTFtagExonParentTranscript)

    Cheers
    Alex

**Notice:** If you leave name, description, or id blank, it will be generated automatically. 
]]>
    </help>
    <expand macro="citations" />
</tool>
