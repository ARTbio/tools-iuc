<?xml version='1.0' encoding='UTF-8'?>
<tool id="getorf" name="getorf" version="6.6.0">
  <description>Find and extract open reading frames
                  (ORFs)</description>
  <macros>
    <token name="@EXECUTABLE@">getorf</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="stdio"/>
  <expand macro="requirements"/>
  <command>getorf

#if $param_getorf_version:
  -getorf:version     "$param_getorf_version"
#end if
#if $param_input_sequence:
  -input:sequence $param_input_sequence
#end if
#if $param_additional_table:
  -additional:table
  #if " " in str($param_additional_table):
    "$param_additional_table"
  #else
    $param_additional_table
  #end if
#end if
#if $param_additional_minsize:
  -additional:minsize $param_additional_minsize
#end if
#if $param_additional_maxsize:
  -additional:maxsize $param_additional_maxsize
#end if
#if $param_additional_find:
  -additional:find
  #if " " in str($param_additional_find):
    "$param_additional_find"
  #else
    $param_additional_find
  #end if
#end if
#if $param_advanced_methionine:
  -advanced:methionine
#end if
#if $param_advanced_circular:
  -advanced:circular
#end if
#if $param_advanced_reverse:
  -advanced:reverse
#end if
#if $param_advanced_flanking:
  -advanced:flanking $param_advanced_flanking
#end if
#if $param_outseq:
  -outseq $param_outseq
#end if
</command>
  <inputs>
    <param name="param_getorf_version" type="text" size="30" value="6.6.0" label="Version of the tool that generated this parameters file" help="(-version) ">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_input_sequence" type="data" format="fasta" optional="True" label="sequence parameter" help="(-sequence) "/>
    <param name="param_additional_table" type="select" optional="True" label="Code to use" help="(-table) ">
      <option value="Bacterial">Bacterial</option>
      <option value="Euplotid Nuclear">Euplotid Nuclear</option>
      <option value="Ascidian Mitochondrial">Ascidian Mitochondrial</option>
      <option value="Alternative Yeast Nuclear">Alternative Yeast Nuclear</option>
      <option value="Blepharisma Macronuclear">Blepharisma Macronuclear</option>
      <option value="Flatworm Mitochondrial">Flatworm Mitochondrial</option>
      <option value="Scenedesmus obliquus">Scenedesmus obliquus</option>
      <option value="Chlorophycean Mitochondrial">Chlorophycean Mitochondrial</option>
      <option value="Thraustochytrium Mitochondrial">Thraustochytrium Mitochondrial</option>
      <option value="Standard (with alternative initiation              codons)">Standard (with alternative initiation              codons)</option>
      <option value="Standard">Standard</option>
      <option value="Yeast Mitochondrial">Yeast Mitochondrial</option>
      <option value="Vertebrate Mitochondrial">Vertebrate Mitochondrial</option>
      <option value="Invertebrate Mitochondrial">Invertebrate Mitochondrial</option>
      <option value="Mold">Mold</option>
      <option value=" Protozoan"> Protozoan</option>
      <option value=" Coelenterate Mitochondrial and              Mycoplasma/Spiroplasma"> Coelenterate Mitochondrial and              Mycoplasma/Spiroplasma</option>
      <option value="Ciliate              Macronuclear and Dasycladacean">Ciliate              Macronuclear and Dasycladacean</option>
      <option value="Echinoderm Mitochondrial">Echinoderm Mitochondrial</option>
      <option value="Trematode Mitochondrial">Trematode Mitochondrial</option>
    </param>
    <param name="param_additional_minsize" type="integer" optional="True" value="30" label="Minimum nucleotide size of ORF to report" help="(-minsize) "/>
    <param name="param_additional_maxsize" type="integer" optional="True" value="1000000" label="Maximum nucleotide size of ORF to report" help="(-maxsize) "/>
    <param name="param_additional_find" type="select" optional="True" label="Type of output" help="(-find) ">
      <option value="Translation of regions between START and STOP codons">Translation of regions between START and STOP codons</option>
      <option value="Translation of regions between STOP codons">Translation of regions between STOP codons</option>
      <option value="Nucleic sequences              between START and STOP codons">Nucleic sequences              between START and STOP codons</option>
      <option value="Nucleic sequences between STOP codons">Nucleic sequences between STOP codons</option>
      <option value="Nucleotides flanking initial STOP codons">Nucleotides flanking initial STOP codons</option>
      <option value="Nucleotides flanking START              codons">Nucleotides flanking START              codons</option>
      <option value="Nucleotides flanking ending STOP codons">Nucleotides flanking ending STOP codons</option>
    </param>
    <param name="param_advanced_methionine" type="boolean" truevalue="-advanced:methionine" falsevalue="" optional="True" label="Change initial START codons to Methionine" help="(-methionine) "/>
    <param name="param_advanced_circular" type="boolean" truevalue="-advanced:circular" falsevalue="" optional="True" label="Is the sequence circula" help="(-circular) "/>
    <param name="param_advanced_reverse" type="boolean" truevalue="-advanced:reverse" falsevalue="" optional="True" label="Find ORFs in the reverse sequence" help="(-reverse) "/>
    <param name="param_advanced_flanking" type="integer" optional="True" value="100" label="Number of flanking nucleotides to report" help="(-flanking) "/>
  </inputs>
  <outputs>
    <data name="param_outseq" format="data"/>
  </outputs>
  <help>**What it does**

</help>
  <expand macro="references"/>
</tool>
