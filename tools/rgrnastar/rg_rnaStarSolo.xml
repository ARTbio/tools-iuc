<tool id="rna_starsolo" name="RNA STARSolo" version="@VERSION@+galaxy0" profile="20.01" license="MIT">
    <description>mapping, demultiplexing and gene quantification for single cell RNA-seq</description>
    <xrefs>
        <xref type="bio.tools">star</xref>
    </xrefs>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="edam"/>
    <expand macro="stdio" >
        <regex match="Segmentation fault" source="both" level="fatal" />
    </expand>

    <command><![CDATA[
    @TEMPINDEX@
    STAR
    @REFGENOMEHANDLING@

    ## Supports Drop-seq, 10X Chromium, inDrop and Smart-Seq
    --soloType $sc.solo_type

    #if str($sc.solo_type) == "CB_UMI_Simple":
    --soloCBwhitelist '$sc.soloCBwhitelist'
    ## 1 - check length of barcode, 0 - do not check
    ## Good for checking custom chemistries
    --soloBarcodeReadLength $sc.soloBarcodeReadLength
    #if str($sc.params.chemistry) == "CR2":
    --soloCBstart 1
    --soloCBlen 16
    --soloUMIstart 17
    --soloUMIlen 10
    #else if str($sc.params.chemistry) == "CR3":
    --soloCBstart 1
    --soloCBlen 16
    --soloUMIstart 17
    --soloUMIlen 12
    #else if str($sc.params.chemistry) == "custom":
    --soloCBstart $sc.params.soloCBstart
    --soloCBlen $sc.params.soloCBlen
    --soloUMIstart $sc.params.soloUMIstart
    --soloUMIlen $sc.params.soloUMIlen
    #end if

    #elif str($sc.solo_type) == "CB_UMI_Complex":
    ## inDrop supports multiple cell barcodes of varying length
        #set $cb_whitelist = []
        #set $cb_pos = []
        #for $cb in $sc.cb_whitelists:
            #silent $cb_whitelist.append(str($cb.whitelist_file))
            #silent $cb_pos.append('_'.join([str($cb.cb_start_anchor), str($cb.cb_start_anchor_pos),str($cb.cb_end_anchor), str($cb.cb_end_anchor_pos)]))
        #end for
    #set $cb_whitelist = ' '.join($cb_whitelist)
    --soloCBwhitelist $cb_whitelist
    #set $cb_pos = ' '.join($cb_pos)
    --soloCBposition $cb_pos
    #set $umi_pos = '_'.join([str($sc.umi_start_anchor), str($sc.umi_start_anchor_pos), str($sc.umi_end_anchor), str($sc.umi_end_anchor_pos)])
    --soloUMIposition $umi_pos
    --soloAdapterSequence $sc.soloAdapterSequence
    --soloAdapterMismatchesNmax $sc.soloAdapterMismatchesNmax

    #elif str($sc.solo_type) == "SmartSeq":
    --soloCBwhitelist None
    #end if

    ## Check that the input pairs are of the same type
    ## otherwise STARsolo will run for a long time and then error out.
    ## We consume either repeats of two inputs R1 + R2
    ## or a collection of paired reads.

    #if str($sc.solo_type) == "CB_UMI_Simple" or str($sc.solo_type) == "CB_UMI_Complex":
        #if str($sc.input_types.use) == "repeat":
            #set $reads1 = []
            #set $reads2 = []
            #for $r1, $r2 in zip($sc.input_types.input1, $sc.input_types.input2):
                #assert $r1.datatype == $r2.datatype
                #silent $reads1.append(str($r1))
                #silent $reads2.append(str($r2))
            #end for
            #set $reads1 = ','.join($reads1)
            #set $reads2 = ','.join($reads2)
        #elif str($sc.input_types.use) == "list_paired":
            #set $r1 = $sc.input_types.input_collection.forward
            #set $r2 = $sc.input_types.input_collection.reverse
            #set $reads1 = $r1
            #set $reads2 = $r2
        #end if
        ## cDNA sequence(s) [R2] always go first, then barcode(s) [R1]
        ## see: Section 3.2 of STAR manual for multiple inputs, and Section 13 for STARsolo inputs
        --readFilesIn $reads2 $reads1
        --soloCBmatchWLtype $sc.soloCBmatchWLtype

    #elif str($sc.solo_type) == "SmartSeq":
        #set $reads1 = []
        #set $reads2 = []
        #set $file_manifest = '/tmp/manifest.tsv'
        #set $file_manifest_fh = open($file_manifest, 'w')
        #set $cellids_fh = open(str($sc.cell_ids), 'r')
        #set $cellids = [str(x.strip()) for x in $cellids_fh.readlines()]
        #silent $cellids_fh.close()
        #if str($sc.input_types_smart_seq.use) == "list_single_end":
            #assert len($cellids) == len($sc.input_types_smart_seq.single_end_collection.keys())
            #for $i,$r1 in enumerate($sc.input_types_smart_seq.single_end_collection):
                #silent $reads1.append(str($r1))
                #silent $file_manifest_fh.write('\t'.join([str($r1), '-', 'ID:' + $cellids[$i]]) + '\n')
            #end for
        #elif str($sc.input_types_smart_seq.use) == "list_paired_end":
            #assert len($cellids) == len($sc.input_types_smart_seq.paired_end_collection.keys())
            #for $i,($r1,$r2) in enumerate($sc.input_types_smart_seq.paired_end_collection):
                #silent $reads1.append(str($r1))
                #silent $reads2.append(str($r2))
                #silent $file_manifest_fh.write('\t'.join([str($r1), str($r2), 'ID:' + $cellids[$i]]) + '\n')
            #end for
        #end if
        #silent $file_manifest_fh.close()
        #set $reads1 = ','.join($reads1)
        #set $reads2 = ','.join($reads2)
        ## For Smart-Seq [R1] is followed by [R2]
        --readFilesManifest $file_manifest
    #end if

    #if $r1.is_of_type('fastq.gz', 'fastqsanger.gz'):
        @FASTQ_GZ_OPTION@
    #end if

    --soloUMIfiltering $solo.soloUMIfiltering
    --soloStrand $solo.soloStrand
    --soloFeatures $solo.soloFeatures
    --soloUMIdedup $sc.soloUMIdedup
    --quantMode TranscriptomeSAM
    --outSAMtype BAM Unsorted

    #if str($solo.filter.filter_type) == "cellranger2":
    --soloCellFilter CellRanger2.2 $solo.filter.n_expected $solo.filter.max_perc $solo.filter.max_min_ratio
    #else if str($solo.filter.filter_type) == "topcells":
    --soloCellFilter TopCells $solo.filter.n_cells
    #else if str($solo.filter.filter_type) == "no_filter":
    --soloCellFilter None
    #end if
    ## Splice junctions are always under "raw" directory

    --soloOutFormatFeaturesGeneField3 '${solo.soloOutFormatFeaturesGeneField3}'
    ## Rename the the selected features directory
    && mv Solo.out/${solo.soloFeatures} Solo.out/soloFeatures
    ## put the barcodes and features stats into a single file
    && cat <(echo "Barcodes:") Solo.out/Barcodes.stats <(echo "Genes:") Solo.out/soloFeatures/Features.stats > '${output_stats}'

    ## BAM sorting (logic copied from samtools_sort wrapper)
    ## choosing BAM SortedByCoord appeared once to give fewer reads
    ## than BAM Unsorted followed by a samtools sort
    ## so better go with the latter?

    &&
    ##compute the number of ADDITIONAL threads to be used by samtools (-@)
    addthreads=\${GALAXY_SLOTS:-2} && (( addthreads-- )) &&
    ##compute the number of memory available to samtools sort (-m)
    ##use only 75% of available: https://github.com/samtools/samtools/issues/831
    addmemory=\${GALAXY_MEMORY_MB_PER_SLOT:-768} &&
    ((addmemory=addmemory*75/100)) &&
    samtools sort -@ \$addthreads -m \$addmemory"M" -T "\${TMPDIR:-.}" -O bam -o '$output_BAM' Aligned.out.bam
    &&
    cat <(echo "Barcodes:") Solo.out/Barcodes.stats <(echo "Genes:") Solo.out/soloFeatures/Features.stats
    ]]></command>
    <inputs>
        <conditional name="sc" >
            <param name="solo_type" type="select" label="Type of single-cell RNA-seq" >
                <option value="CB_UMI_Simple">Drop-seq or 10X Chromium</option>
                <option value="CB_UMI_Complex">inDrop</option>
                <option value="SmartSeq">Smart-Seq</option>
            </param>
            <when value="CB_UMI_Simple">
                <expand macro="input_selection" />
                <expand macro="reference_selection" />
                <param format="txt,tsv" argument="--soloCBwhitelist" type="data" label="RNA-Seq Cell Barcode Whitelist"/>
                <conditional name="params" >
                    <param name="chemistry" type="select" label="Configure Chemistry Options">
                        <option value="CR2" selected="true">Cell Ranger v2</option>
                        <option value="CR3">Cell Ranger v3</option>
                        <option value="custom">Custom</option>
                    </param>
                    <when value="CR2" />
                    <when value="CR3" />
                    <when value="custom" >
                        <param argument="--soloCBstart" type="integer" min="1" value="1" label="Cell Barcode Start Base" />
                        <param argument="--soloCBlen" type="integer" min="1" value="16" label="Cell Barcode Length" />
                        <param argument="--soloUMIstart" type="integer" min="1" value="17" label="UMI Start Base" />
                        <param argument="--soloUMIlen" type="integer" min="1" value="10" label="UMI Length" />
                    </when>
                </conditional>
                <param argument="--soloBarcodeReadLength" type="boolean" truevalue="1" falsevalue="0" checked="true" label="Barcode Size is same size of the Read" help="Disable this if your R1 barcodes contain poly-T bases after the barcode sequence." />
                <param argument="--soloUMIdedup" type="select" label="UMI deduplication (collapsing) algorithm" help="All has all UMIs with 1 mismatch distance to each other collapsed, Directional follows the 'directional' method given in UMI-tools, Exact collapses only exactly matching UMIs.">
                    <expand macro="umidedup_options" />
                    <option value="Exact" >Exact</option>
                </param>
                <param argument="--soloCBmatchWLtype" type="select" label="Matching the Cell Barcodes to the WhiteList" help="Exact: only exact matches allowed; 1MM: only one match in whitelist with 1 mismatched base allowed. Allowed
    CBs have to have at least one read with exact match; 1MM_multi: multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches; 1MM_multi_pseudocounts: same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes.">
                    <expand macro="cb_match_wl_common" />
                    <expand macro="cb_match_wl_cellranger" />
                </param>
            </when>
            <when value="CB_UMI_Complex">
                <expand macro="input_selection" />
                <expand macro="reference_selection" />
                <repeat name="cb_whitelists" title="Cell barcode whitelist information" max="2" >
                    <param name="whitelist_file" format="txt,tsv" type="data" label="RNA-Seq Cell Barcode Whitelist"/>
                    <param name="cb_start_anchor" type="select" label="Start anchor base for cell barcode">
                        <expand macro="anchor_types" />
                    </param>
                    <param name="cb_start_anchor_pos" type="integer" value="0" label="0-based position of the CB start with respect to the anchor base" />
                    <param name="cb_end_anchor" type="select" label="End anchor base for cell barcode">
                        <expand macro="anchor_types" />
                    </param>
                    <param name="cb_end_anchor_pos" type="integer" value="0" label="0-based position of the CB end with respect to the anchor base" />
                </repeat>
                <param name="umi_start_anchor" type="select" label="Start anchor base for UMI">
                    <expand macro="anchor_types" />
                </param>
                <param name="umi_start_anchor_pos" type="integer" value="0" label="0-based position of the UMI start with respect to the anchor base" />
                <param name="umi_end_anchor" type="select" label="End anchor base for UMI">
                    <expand macro="anchor_types" />
                </param>
                <param name="umi_end_anchor_pos" type="integer" value="0" label="0-based position of the UMI end with respect to the anchor base" />
                <param argument="--soloAdapterSequence" type="text" value="-" label="Adapter sequence to anchor barcodes." />
                <param argument="--soloAdapterMismatchesNmax" type="integer" min="1" value="1" label="Maximum number of mismatches allowed in adapter sequence" />
                <param argument="--soloUMIdedup" type="select" label="UMI deduplication (collapsing) algorithm" help="All has all UMIs with 1 mismatch distance to each other collapsed, Directional follows the 'directional' method given in UMI-tools, Exact collapses only exactly matching UMIs.">
                    <expand macro="umidedup_options" />
                    <option value="Exact" >Exact</option>
                </param>
                <param argument="--soloCBmatchWLtype" type="select" label="Matching the Cell Barcodes to the WhiteList" help="Exact: only exact matches allowed; 1MM: only one match in whitelist with 1 mismatched base allowed. Allowed
    CBs have to have at least one read with exact match; 1MM_multi: multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches; 1MM_multi_pseudocounts: same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes.">
                    <expand macro="cb_match_wl_common" />
                </param>
            </when>
            <when value="SmartSeq">
                <expand macro="input_selection_smart_seq" />
                <expand macro="reference_selection" />
                <param name="cell_ids" type="data" label="File containing cell IDs of the samples. One ID per line in order of samples in the above collection."/>
                <param argument="--soloUMIdedup" type="select" label="UMI deduplication (collapsing) algorithm" help="All has all UMIs with 1 mismatch distance to each other collapsed, Directional follows the 'directional' method given in UMI-tools, Exact collapses only exactly matching UMIs.">
                    <option value="Exact" >Exact</option>
                    <option value="NoDedup">Do not deduplicate UMIs</option>
                </param>
            </when>
        </conditional>
        <section name="solo" title="Advanced Settings" expanded="true">
            <param argument="--soloStrand" type="select" label="Strandedness of Library" help="Unstranded has no strand information, Forward has the read strand the same as the original RNA molecule, Reverse has the read strand opposite to the original RNA molecule">
                <option value="Unstranded" />
                <option value="Forward" selected="true" />
                <option value="Reverse" />
            </param>
            <param argument="--soloFeatures" type="select" label="Collect UMI counts for these genomic features" >
                <option value="Gene" selected="true">Gene: Count reads matching the Gene Transcript</option>
                <option value="SJ" >Splice Junctions: Count reads at exon-intron junctions</option>
                <option value="GeneFull" >Full: Count all reads overlapping genes' exons and introns</option>
            </param>
            <param argument="--soloUMIfiltering" type="select" label="Type of UMI filtering" >
                <option value="-" selected="true">Remove UMIs with N and homopolymers (similar to CellRanger 2.2.0)</option>
                <option value="MultiGeneUMI" >Remove lower-count UMIs that map to more than one gene ((introduced in CellRanger 3.x.x)</option>
            </param>
            <conditional name="filter" >
                <param name="filter_type" type="select" label="Cell filtering type and parameters" >
                    <option value="cellranger2" selected="true" >Simple filtering of CellRanger v2</option>
                    <option value="topcells" >Filter top N cells</option>
                    <option value="no_filter" >Do not filter</option>
                </param>
                <when value="cellranger2" >
                    <param name="n_expected" type="integer" min="1" value="3000" label="Number of expected cells" />
                    <param name="max_perc" type="float" min="0" max="1" value="0.99" label="Robust maximum percentile for UMI count" />
                    <param name="max_min_ratio" type="float" min="1" value="10" label="Maximum to minimum ratio for UMI count" />
                </when>
                <when value="topcells" >
                    <param name="n_cells" type="integer" min="1" value="3000" label="Number of top cells to report sorted by UMI count" />
                </when>
                <when value="no_filter" />
            </conditional>
            <param argument="--soloOutFormatFeaturesGeneField3" type="text" value="Gene Expression" label="Field 3 in the Genes output." help="Input '-' to remove the 3rd column from the output." />
        </section>
    </inputs>
    <outputs>
        <data format="txt" name="output_log" label="${tool.name} on ${on_string}: log" from_work_dir="Log.final.out">
            <expand macro="dbKeyActions" />
        </data>
<!--
        <data format="tsv" name="output_genes" label="${tool.name} on ${on_string}: Genes" />
        <data format="tsv" name="output_barcodes" label="${tool.name} on ${on_string}: Barcodes" />
        <data format="mtx" name="output_matrix" label="${tool.name} on ${on_string}: Matrix Gene Counts" >
            <expand macro="dbKeyActions" />
        </data>
-->
        <!-- soloCellFilter set to None, if SJ is selected for soloFeatures -->
        <data format="tsv" name="output_genes" label="${tool.name} on ${on_string}: Genes raw"
              from_work_dir="Solo.out/soloFeatures/raw/features.tsv" >
              <filter>solo['filter']['filter_type'] == "no_filter" or solo['soloFeatures'] == "SJ" </filter>
        </data>
        <data format="tsv" name="output_genes_filtered" label="${tool.name} on ${on_string}: Genes filtered"
              from_work_dir="Solo.out/soloFeatures/filtered/features.tsv" >
              <filter>solo['filter']['filter_type'] != "no_filter" and solo['soloFeatures'] != "SJ" </filter>
        </data>
        <data format="tsv" name="output_barcodes" label="${tool.name} on ${on_string}: Barcodes raw"
              from_work_dir="Solo.out/soloFeatures/raw/barcodes.tsv" >
              <filter>solo['filter']['filter_type'] == "no_filter" or solo['soloFeatures'] == "SJ" </filter>
        </data>
        <data format="tsv" name="output_barcodes_filtered" label="${tool.name} on ${on_string}: Barcodes filtered"
              from_work_dir="Solo.out/soloFeatures/filtered/barcodes.tsv" >
              <filter>solo['filter']['filter_type'] != "no_filter" and solo['soloFeatures'] != "SJ" </filter>
        </data>
        <data format="mtx" name="output_matrix" label="${tool.name} on ${on_string}: Matrix Gene Counts raw"
              from_work_dir="Solo.out/soloFeatures/raw/matrix.mtx" >
            <filter>solo['soloFeatures'] == "Gene" and solo['filter']['filter_type'] == "no_filter" </filter>
            <expand macro="dbKeyActions" />
        </data>
        <data format="mtx" name="output_matrix_filtered" label="${tool.name} on ${on_string}: Matrix Gene Counts filtered"
              from_work_dir="Solo.out/soloFeatures/filtered/matrix.mtx" >
            <filter>solo['soloFeatures'] == "Gene" and solo['filter']['filter_type'] != "no_filter" </filter>
            <expand macro="dbKeyActions" />
        </data>
        <data format="mtx" name="output_matrixSJ" label="${tool.name} on ${on_string}: Matrix Splice Junction Counts"
              from_work_dir="Solo.out/soloFeatures/raw/matrix.mtx" >
            <filter>solo['soloFeatures'] == "SJ" </filter>
            <expand macro="dbKeyActions" />
        </data>
        <data format="mtx" name="output_matrixGeneFull" label="${tool.name} on ${on_string}: Matrix Full Gene Counts raw"
              from_work_dir="Solo.out/soloFeatures/raw/matrix.mtx" >
            <filter>solo['soloFeatures'] == "GeneFull" and solo['filter']['filter_type'] == "no_filter" </filter>
            <expand macro="dbKeyActions" />
        </data>
        <data format="mtx" name="output_matrixGeneFull_filtered" label="${tool.name} on ${on_string}: Matrix Full Gene Counts filtered"
              from_work_dir="Solo.out/soloFeatures/filtered/matrix.mtx" >
            <filter>solo['soloFeatures'] == "GeneFull" and solo['filter']['filter_type'] != "no_filter" </filter>
            <expand macro="dbKeyActions" />
        </data>
        <data format="bam" name="output_BAM" label="${tool.name} on ${on_string}: Alignments" >
            <expand macro="dbKeyActions" />
        </data>
        <data format="txt" name="output_stats" label="${tool.name} on ${on_string}: Barcode/Feature Statistic Summaries"/>
    </outputs>
    <!-- Generating test data that is big enough for STARsolo to detect and small enough
         for Galaxy to test requires careful modification of input FASTA and GTF data,
         where the length of FASTA cannot exceed the largest position in the GTF file,
         regardless of the FASTA starting sequence position.

         A full writeup of how to subset single cell data for use in STARsolo is given
         here: https://gist.github.com/mtekman/149a7c52fd73e5d8ebe49f5a27b0743d
    -->
    <tests>
        <test expect_num_outputs="6">
            <!-- Test soloType SmartSeq -->
            <conditional name="sc" >
                <param name="solo_type" value="SmartSeq" />
                <conditional name="input_types_smart_seq">
                    <param name="use" value="list_paired_end" />
                    <param name="paired_end_collection" >
                        <collection type="list:paired">
                            <element name="pair1">
                                <collection type="paired">
                                    <element name="forward" value="smartseq1.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq1.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair2">
                                <collection type="paired">
                                    <element name="forward" value="smartseq2.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq2.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair3">
                                <collection type="paired">
                                    <element name="forward" value="smartseq3.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq3.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair4">
                                <collection type="paired">
                                    <element name="forward" value="smartseq4.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq4.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair5">
                                <collection type="paired">
                                    <element name="forward" value="smartseq5.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq5.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair6">
                                <collection type="paired">
                                    <element name="forward" value="smartseq6.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq6.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair7">
                                <collection type="paired">
                                    <element name="forward" value="smartseq7.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq7.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair8">
                                <collection type="paired">
                                    <element name="forward" value="smartseq8.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq8.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                            <element name="pair9">
                                <collection type="paired">
                                    <element name="forward" value="smartseq9.R1.fastq.gz" ftype="fastqsanger.gz" />
                                    <element name="reverse" value="smartseq9.R2.fastq.gz" ftype="fastqsanger.gz" />
                                </collection>
                            </element>
                        </collection>
                    </param>
                </conditional>
                <conditional name="refGenomeSource">
                    <param name="geneSource" value="history" />
                    <param name="genomeFastaFiles" value="filtered3.Homo_sapiens.GRCh38.dna.chromosome.21.fa.gz" />
                    <param name="genomeSAindexNbases" value="4" />
                    <param name="sjdbOverhang" value="100" />
                    <param name="sjdbGTFfile" value="filtered3.Homo_sapiens.GRCh38.100.chr21.gtf" ftype="gtf"/>
                </conditional>
                <param name="cell_ids" value="smartseq.cellids.txt" />
                <param name="soloUMIdedup" value="Exact" />
            </conditional>
            <section name="solo" >
                <param name="soloStrand" value="Unstranded" />
                <conditional name="filter">
                    <param name="filter_type" value="topcells" />
                    <param name="n_cells" value="2" />
                </conditional>
            </section>
            <output name="output_barcodes_filtered" >
                <assert_contents>
                    <has_line line="CSC6_D02" />
                    <not_has_text text="MGH26_A02" />
                </assert_contents>
            </output>
            <output name="output_genes_filtered">
                <assert_contents>
                    <has_line_matching expression="ENSG00000279493\s+FP565260\.4\s+Gene\s+Expression" />
                    <has_line_matching expression="ENSG00000279064\s+FP236315\.1\s+Gene\s+Expression" />
                </assert_contents>
            </output>
            <output name="output_matrix_filtered" >
                <assert_contents>
                    <has_line_matching expression="14\s+3\s+10" />
                    <has_line_matching expression="12\s+3\s+1" />
                </assert_contents>
            </output>
            <output name="output_stats" >
                <assert_contents>
                    <has_line_matching expression="\s+nExactMatch\s+9000" />
                    <has_line_matching expression="\s+nUMIs\s+32" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
**What it does**

**STARSolo** is a turnkey solution for analyzing droplet single cell RNA sequencing data (e.g. 10X Genomics Chromium System) built directly into STAR_ code. STARsolo takes raw FASTQ reads files as input, and performs the following operations:

 * Error correction and demultiplexing of cell barcodes using user-input whitelist
 * Mapping the reads to the reference genome using the standard STAR spliced read alignment algorithm
 * Error correction and collapsing (deduplication) of Unique Molecular Identifiers (UMIs)
 * Quantification of per-cell gene expression by counting the number of reads per gene

STARsolo output is designed to be a drop-in replacement for 10X CellRanger gene quantification output. It follows CellRanger logic for cell barcode whitelisting and UMI deduplication, and produces nearly identical gene counts in the same format. At the same time STARsolo is 10 times faster than CellRanger.

.. _STAR: https://github.com/alexdobin/STAR
]]></help>
    <expand macro="citations"/>
</tool>
