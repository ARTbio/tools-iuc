<tool id="ena_upload" name="ENA Upload tool" version="0.3" >
  <macros>
    <token name="@VERSION@">0.2.4</token>
    <import>samples_macros.xml</import>
</macros>
  <requirements>
    <requirement type="package" version="@VERSION@">ena-upload-cli</requirement>
    <requirement type="package" version="1.2.0">xlrd</requirement>
  </requirements>
  <command detect_errors="exit_code"><![CDATA[
mkdir ./submission_files; 
webin_id=`grep 'username' $credentials`;
if [ "\$webin_id" = "" ]; then
  ## No credentials in user defined preferences    
  ## Fallback to global defined credentials (if exist)   
  #import os
  #if os.path.isfile(os.environ.get('GALAXY_ENA_SECRETS', '')):
      credentials_path=\${ENA_SECRETS};     
      webin_id=`grep 'username' \$GALAXY_ENA_SECRETS`;
      if [ "\$webin_id" = "" ]; then
          echo "No ENA credentials defined. Set your credentials via: User -> Preferences -> Manage Information";
          exit 1;
      fi;
  #else:
      echo "No global credentials file defined. Set your credentials via: User -> Preferences -> Manage Information";
      exit 1;
  #end if
else
  credentials_path='$credentials';
fi;
      
#set working_dir = os.getcwd()
#set $dry_run_option = "False"
#set viral_submission = "False"
#if $action_options.input_format_conditional.input_format == "build_tables":
  python '$__tool_directory__/extract_tables.py' --action $action_options.action --out_dir ./submission_files --studies $studies_json;
  #set $studies_table_path = './submission_files/studies.tsv'
  #set $samples_table_path =   './submission_files/samples.tsv'
  #set $experiments_table_path = './submission_files/experiments.tsv'
  #set $runs_table_path =  './submission_files/runs.tsv'
#end if

#if $action_options.input_format_conditional.input_format == "excel_tables":
    python '$__tool_directory__/process_xlsx.py'
    #if $action_options.input_format_conditional.viral_submission == "true":
        --vir 
    #end if
    --action '$action_options.action' --form '$action_options.input_format_conditional.xlsx_file' --out_dir ./submission_files ;
    #set $studies_table_path = './submission_files/studies.tsv'
    #set $samples_table_path =   './submission_files/samples.tsv'
    #set $experiments_table_path = './submission_files/experiments.tsv'
    #set $runs_table_path =  './submission_files/runs.tsv'
    #if $action_options.input_format_conditional.dry_run == "true":
      #set $dry_run_option = "True"
    #end if
#end if

#if $action_options.input_format_conditional.input_format != "user_generated_tables":
    cp $studies_table_path $studies_table_out;
    cp $samples_table_path $samples_table_out;
    cp $experiments_table_path $experiments_table_out;
    cp $runs_table_path $runs_table_out;
    #if $action_options.input_format_conditional.dry_run == "true":
      #set $dry_run_option = "True"
    #end if
#end if


## create the list of files to upload and make the symlinks 
#import re      
#set $files_to_upload = list()
#if $action_options.input_format_conditional.input_format == "build_tables":
    #for $study in $action_options.input_format_conditional.conditional_viral_metadata.rep_study:
      #for $sample in $study.rep_sample:
        #for $experiment in $sample.rep_experiment:
          #for $run in $experiment.rep_runs:
            #for $file in $run.upload_files:
                #set $safename_reads_file = re.sub('[^\w\-_\.]', '_', $file.element_identifier)
                ln -s '$file' $safename_reads_file &&
                $files_to_upload.append(str($safename_reads_file))
            #end for
          #end for
        #end for
      #end for
    #end for
#else:
    #for $file in $action_options.input_format_conditional.data:
        #set $safename_reads_file = re.sub('[^\w\-_\.]', '_', $file.element_identifier)
        ln -s '$file' $safename_reads_file &&
        $files_to_upload.append(str($safename_reads_file))
    #end for
#end if


#if $dry_run_option == "False":
ena-upload-cli
    --tool 'ena-upload-cli v@VERSION@ @ Galaxy'
    --action '$action_options.action'
    --center '$action_options.center'
    --secret \${credentials_path}
    --data
    #for $dataset in $files_to_upload:
        '$dataset'
    #end for
#if $action_options.input_format_conditional.input_format == "user_generated_tables":
    --experiment '$action_options.input_format_conditional.experiments_users_table'
    --study '$action_options.input_format_conditional.studies_users_table'
    --run '$action_options.input_format_conditional.runs_users_table'
    --sample '$action_options.input_format_conditional.samples_users_table'
    #if "$action_options.input_format_conditional.viral_submission" == "true":
        --vir
    #end if
#else:
    --experiment '$experiments_table_path'
    --study '$studies_table_path'
    --run '$runs_table_path'
    --sample '$samples_table_path'
    #if $action_options.input_format_conditional.input_format == "build_tables":
        #if $action_options.input_format_conditional.conditional_viral_metadata.viral_sample == "true":
          --vir
        #end if
    #else:
        #if $action_options.input_format_conditional.viral_submission == "true":
          --vir
        #end if
    #end if
#end if
#if $action_options.submit_dev == "true":
    -d
#end if
  > '$output'
#else:
    exit 0;
#end if
]]></command>
    <configfiles>
        <configfile name="credentials"><![CDATA[
#set $webin_id = $__user__.extra_preferences.get('ena_webin_account|webin_id', "").strip()
#set $password = $__user__.extra_preferences.get('ena_webin_account|password', "").strip()
username: "$webin_id"
password: "$password"
        ]]></configfile>
        <configfile name="studies_json">
#import json
#import re
#if $action_options.input_format_conditional.input_format == "build_tables":
  #set $files_to_upload = list()
  #set $studies = list()
  #for $study in $action_options.input_format_conditional.conditional_viral_metadata.rep_study:
    #set samples = list()
    #for $sample in $study.rep_sample:
      #set experiments = list()
      #for $experiment in $sample.rep_experiment:
        #set runs = list()
        #for $run in $experiment.rep_runs:
            #set run_files = list()
            #for $file in $run.upload_files:
              #set $safename_reads_file = re.sub('[^\w\-_\.]', '_', $file.element_identifier)
              $run_files.append(str($safename_reads_file))
            #end for
            $runs.append($run_files)
        #end for
        $experiments.append({'title':str($experiment.experiment_title),'experiment_design':str($experiment.experiment_design),'library_strategy':str($experiment.library_strategy),'library_source':str($experiment.library_source),'library_selection':str($experiment.library_selection),'library_layout':str($experiment.library_layout),'insert_size':str($experiment.insert_size),'library_construction_protocol':str($experiment.library_construction_protocol),'platform':str($experiment.platform),'instrument_model':str($experiment.instrument_model),'runs':$runs})
      #end for
      #if $action_options.input_format_conditional.conditional_viral_metadata.viral_sample == "true":
        $samples.append({'title':str($sample.sample_title),'description':str($sample.sample_description),'tax_name':str($sample.scientific_name),'tax_id':str($sample.tax_id),'collection_date':str($sample.collection_date),'geo_location':str($sample.geo_location_country),'host_common_name':str($sample.host_common_name),'host_subject_id':str($sample.host_subject_id),'host_health_state':str($sample.host_health_state),'host_sex':str($sample.host_sex),'host_scientific_name':str($sample.host_scientific_name),'collector_name':str($sample.collector_name),'collecting_institution':str($sample.collecting_institution),'isolate':str($sample.isolate),'experiments':$experiments})
      #else:
        $samples.append({'title':str($sample.sample_title),'description':str($sample.sample_description),'tax_name':str($sample.scientific_name),'tax_id':str($sample.tax_id),'experiments':$experiments})
      #end if
    #end for
    $studies.append({'title':str($study.study_title),'type':str($study.study_type),'abstract':str($study.study_abstract),'pubmed_id':str($study.study_pubmed_id),'samples':$samples})
  #end for
  #echo $json.dumps($studies)
#end if
        </configfile>
    </configfiles>
<inputs>
       <conditional name="action_options">
            <param name="action" type="select" label="Action to execute">
                <option value="add" selected="True">Add new data</option>
                <option value="modify">Modify metadata</option>
            </param>
            <when value="add">
                <param name="submit_dev" type="boolean" label="Submit to test ENA server?" help="By selecting yes the reads will be submitted " />
                <expand macro="table_inputs_macro" />
            </when>
            <when value="modify">
                <expand macro="table_inputs_macro" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="output" format="data" label="${tool.name} on ${on_string}: Upload summary"/>
        <data name="studies_table_out" format="tabular" label="Studies table">
            <filter> action_options['input_format_conditional']['input_format'] == "build_tables" or action_options['input_format_conditional']['input_format'] == "excel_tables"</filter>
        </data>
        <data name="samples_table_out" format="tabular" label="Samples table">
            <filter> action_options['input_format_conditional']['input_format'] == "build_tables" or action_options['input_format_conditional']['input_format'] == "excel_tables"</filter>
        </data>
        <data name="experiments_table_out" format="tabular" label="Experiments table">
            <filter> action_options['input_format_conditional']['input_format'] == "build_tables" or action_options['input_format_conditional']['input_format'] == "excel_tables"</filter>
        </data>
        <data name="runs_table_out" format="tabular" label="Runs table">
            <filter> action_options['input_format_conditional']['input_format'] == "build_tables" or action_options['input_format_conditional']['input_format'] == "excel_tables"</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="action_options|action" value="add"/>
            <param name="action_options|submit_dev" value="False"/>
            <param name="action_options|input_format_conditional|input_format" value="excel_tables"/>
            <param name="action_options|input_format_conditional|dry_run" value="True"/>
            <param name="action_options|input_format_conditional|xlsx_file" value="metadata_test_viral.xlsx"/>
            <param name="action_options|input_format_conditional|data" value="sample.fq"/>
            <param name="center" value="Some research center"/>
            <output name="experiments_table_out">
                <assert_contents>
                    <has_n_lines n="5"/>
                    <has_n_columns n="17"/>
                    <has_line_matching expression="alias\tstatus\taccession\ttitle\tstudy_alias\tsample_alias\tdesign_description\tlibrary_name\tlibrary_strategy\tlibrary_source\tlibrary_selection\tlibrary_layout\tinsert_size\tlibrary_construction_protocol\tplatform\tinstrument_model\tsubmission_date" />
                    <has_line_matching expression="e_(.*)_026\tadd\taccession_ena\tNanopore sequencing\tSARS-CoV-2_genomes_01\ts_(.*)"/>
                    <has_text text="accession_ena"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        This is a wrapper for the ENA upload tool in https://github.com/usegalaxy-eu/ena-upload-cli
        The input metadata can be submitted following the tabular format of the templates in https://github.com/usegalaxy-eu/ena-upload-cli/tree/master/example_tables
        It is also possible to submit an excel file by following the template in https://drive.google.com/file/d/1ncC22--tW2v-EI-te_r86sAZujIPAjlX/view?usp=sharing
        For viral submissions a larger set of metadata is required, you can find the template in https://drive.google.com/file/d/1U4VdcczsIecIXxseV8svE1zO_CBUadog/view?usp=sharing 
    ]]></help>
</tool>
