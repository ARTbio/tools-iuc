<?xml version="1.0"?>
<tool id="sansa" name="sansa" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>structural variant annotation</description>
    <macros>
        <token name="@TOOL_VERSION@">0.0.7</token>
        <token name="@VERSION_SUFFIX@">0</token> 
        <xml name="fg">
            <section name="fg" title="Feature and gene annotation options" expanded="true">
                <param argument="--gtf" type="data" format="gtf,gff3,bed" label="Select file"/>                
                <param argument="--id" type="text" value="gene_name" label="Set GTF/GFF3 attribute">
                    <option value="exon_id">exon_id</option>
                    <option value="gene_id">gene_id</option>
                    <option value="gene_name">gene_name</option>
                    <option value="Name">Name</option>
                </param>
                <param argument="--feature" type="text" value="gene" label="Set GTF/GFF3 feature">
                    <option value="gene">gene</option>
                    <option value="exon">exon</option>
                </param>
                <param argument="--distance" type="integer" min="0" value="1000" label="Set maximum distance" help="0: overlapping features only"/>
            </section>
        </xml>
        <xml name="s">
            <section name="s" title="SV annotation options" expanded="true">
                <param argument="--db" type="data" format="vcf,bcf" label="Select database file"/>            
                <param argument="--bpoffset" type="integer" value="50" label="Set maximum breakpoint offset"/>
                <param argument="--ratio" type="float" min="0.0" max="1.0" value="0.8" label="Set minimum size ratio smaller SV to larger SV"/>
                <param argument="--strategy" type="select" label="Select matching strategy">
                    <option value="best" selected="true">Best</option>
                    <option value="all">All</option>
                </param>
                <param argument="--notype" type="boolean" truevalue="-n" falsevalue="" label="Require matching SV types?"/>
                <param argument="--nomatch" type="boolean" truevalue="-m" falsevalue="" label="Report SVs without match in database?"/>
            </section>
        </xml>        
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">sansa</requirement>
    </requirements>    
    <version_command><![CDATA[sansa -v | grep "Sansa " | cut -d "v" -f 3]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
## run
sansa annotate
## sv annotation options
#if $type_cond.type_sel == 's' or $type_cond.type_sel == 'sfg'
    --db '$type_cond.s.db'
    --bpoffset $type_cond.s.bpoffset
    --ratio $type_cond.s.ratio
    --strategy '$type_cond.s.strategy'
    $type_cond.s.notype
    $type_cond.s.nomatch
## feature and gene annotation options
#else if $type_cond.type_sel == 'fg' or $type_cond.type_sel == 'sfg'
    --gtf '$type_cond.fg.gtf'
    --id '$type_cond.fg.id'
    --feature '$type_cond.fg.feature'
    --distance $type_cond.fg.distance
#end if
## input
'$input'

## postprocessing
2>&1 | tee -a '$out_log'
    ]]></command>
    <inputs>
        <param name="input" type="data" format="vcf" label="Select input file"/>
        <conditional name="type_cond">
            <param name="type_sel" type="select" label="Select annotation mode(s)">
                <option value="s" selected="true">SV</option>
                <option value="fg">Feature/Gene</option>
                <option value="sfg">SV and Feature/Gene</option>
            </param>
            <when value="s">
                <expand macro="s"/>
            </when>
            <when value="fg">
                <expand macro="fg"/>
            </when>
            <when value="sfg">
                <expand macro="s"/>
                <expand macro="fg"/>
            </when>
        </conditional>
        <section name="oo" title="Output options" expanded="true">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="anno" selected="true">Annotation</option>
                <option value="log">Log</option>
                <option value="query">Query SV</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_anno" format="bcf" from_work_dir="anno.bcf" label="${tool.name} on ${on_string}: Annotation">
            <filter>'anno' in oo['out']</filter>
        </data>
        <data name="out_query" format="tabular.gz" from_work_dir="query.tsv.gz" label="${tool.name} on ${on_string}: Query SV">
            <filter>'query' in oo['out']</filter>
        </data>
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in oo['out']</filter>            
        </data>    
    </outputs>
    <tests>
        <!-- #1 s, default -->
        <test expect_num_outputs="3">
            <param name="input" value="input.vcf"/>
            <conditional name="type_cond">
                <param name="type_sel" value="s"/>
                <section name="s">
                    <param name="db" value="db.vcf.gz"/>
                </section>
            </conditional>
            <section name="oo">
                <param name="out" value="anno,log,query"/>
            </section>
            <output name="out_anno">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>
            <output name="out_query">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>            
        </test>
        <!-- #2 s, custom -->
        <test expect_num_outputs="3">
            <param name="input" value="input.vcf"/>
            <conditional name="type_cond">
                <param name="type_sel" value="s"/>
                <section name="s">
                    <param name="db" value="dbvcf.gz"/>
                    <param name="bpoffset" value="51"/>
                    <param name="ratio" value="0.79"/>
                    <param name="strategy" value="all"/>
                    <param name="notype" value="true"/>
                    <param name="nomatch" value="true"/>
                </section>
            </conditional>
            <section name="oo">
                <param name="out" value="anno,log,query"/>
            </section>
            <output name="out_anno">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>
            <output name="out_query">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+"/>
                </assert_contents>
            </output>            
        </test>

    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

Delly *sansa* is a structural variant (SV) annotation tool.

...

**Input**

- an annotation database, e.g. `gnomAD-SV <https://gnomad.broadinstitute.org/>`_ or `1000 Genomes phase 3 <https://www.internationalgenome.org/phase-3-structural-variant-dataset>`_.




::

    Courier new text

**Output**

The method generates two output files: anno.bcf with annotation SVs augmented by a unique ID (INFO/ANNOID) and query.tsv.gz with query SVs matched to annotation IDs.

.. class:: infomark

**References**

More information are available on `GitHub <https://github.com/dellytools/sansa>`_.

    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/bts378</citation>
    </citations>
</tool>