<tool id="idba_ud" name="idba_ud" version="1.1.3">
	<description>
		IDBA-UD - Iterative de Bruijn Graph Assembler for sequencing data with highly uneven depth
	</description>
	<requirements>
		<requirement type="package" version="1.1.3">idba</requirement>
	</requirements>
	<command>

	idba_ud

	--read '$read'
	#if $read_level_2:
		--read_level_2 '$read_level_2'
	#end if
	#if $read_level_3:
		--read_level_3 '$read_level_3'
	#end if
	#if $read_level_4:
		--read_level_4 '$read_level_4'
	#end if
	#if $read_level_5:
		--read_level_5 '$read_level_5'
	#end if
	#if $long_read:
		--long_read '$long_read'
	#end if
	--mink $mink
	--maxk $maxk
	--step $step
	--inner_mink $inner_mink
	--inner_step $inner_step
	--prefix $prefix
	--min_count $min_count
	--min_support $min_support
	--num_threads \${GALAXY_SLOTS:-1}
	--seed_kmer $seed_kmer
	--min_contig $min_contig
	--similar $similar
	--max_mismatch $max_mismatch
	--min_pairs $min_pairs
	#if str( $other ) != "None":
		$other
	#end if

	; 

	mv out/scaffold.fa $output

	</command>

	<inputs>
		<param name="read" type="data" format="fasta" label="Fasta read file. Lower or equal to 250b (--read)"/>
		<param name="long_read" type="data" format="fasta" optional="true" label="Fasta long read file. More than 250b (--long_read)"/>

		<param name="read_level_2" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for second level scaffolds (--read_level_2)"/>
		<param name="read_level_3" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for third level scaffolds (--read_level_3)"/>
		<param name="read_level_4" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fourth level scaffolds (--read_level_4)"/>
		<param name="read_level_5" type="data" format="fasta" optional="true" label="Fasta Paired-end reads for fifth level scaffolds (--read_level_5)"/>

		<param name="mink" type="integer" value="20" max="124" label="Minimum k value. Lower or equal to 124 (--mink)"/>
		<param name="maxk" type="integer" value="100" max="124" label="Maximum k value. Lower or equal to 124 (--maxk)"/>
		<param name="step" type="integer" value="20" label="Increment of k-mer of each iteration (--step)"/>
		<param name="inner_mink" type="integer" value="10" label="Inner minimum k value (--inner_mink)"/>
		<param name="inner_step" type="integer" value="5" label="Inner increment of k-mer (--inner_step)"/>
		<param name="prefix" type="integer" value="3" label="Prefix length used to build sub k-mer table (--prefix)"/>
		<param name="min_count" type="integer" value="2" label="Minimum multiplicity for filtering k-mer when building the graph (--min_count)"/>
		<param name="min_support" type="integer" value="1" label="Minimum supoort in each iteration (--min_support)"/>
		<param name="num_threads" type="integer" value="0" label="Number of threads (--num_threads)"/>
		<param name="seed_kmer" type="integer" value="30" label="Seed kmer size for alignment (--seed_kmer)"/>
		<param name="min_contig" type="integer" value="200" label="Minimum size of contig (--min_contig)"/>
		<param name="similar" type="float" value="0.95" label="Similarity for alignment (--similar)"/>
		<param name="max_mismatch" type="integer" value="3" label="Max mismatch of error correction (--max_mismatch)"/>
		<param name="min_pairs" type="integer" value="3" label="Minimum number of pairs (--min_pairs)"/>

		<param name="other" type="select" display="checkboxes" multiple="true" label="Other options">
			<option value="--no_bubble">Do not merge bubble (--no_bubble)</option>
			<option value="--no_local">Do not use local assembly (--no_local)</option>
			<option value="--no_coverage">Do not iterate on coverage (--no_coverage)</option>
			<option value="--no_correct">Do not do correction (--no_correct)</option>
			<option value="--pre_correction">Perform pre-correction before assembly (--pre_correction)</option>
		</param>
	</inputs>
	<outputs>
		<data name="output" format="fasta"/>
	</outputs>
	<tests>
		<test>
			<param name="read" value="merged.fa" ftype="fasta"/>
			<output name="output" file="out/scaffold.fa" ftype="fasta"/>
		</test>
	</tests>
	<help>
	IDBA-UD is a iterative De Bruijn Graph De Novo Assembler for Short Reads Sequencing data with Highly Uneven Sequencing Depth. It is an extension of IDBA algorithm. IDBA-UD also iterates from small k to a large k. In each iteration, short and low-depth contigs are removed iteratively with cutoff threshold from low to high to reduce the errors in low-depth and high-depth regions. Paired-end reads are aligned to contigs and assembled locally to generate some missing k-mers in low-depth regions. With these technologies, IDBA-UD can iterate k value of de Bruijn graph to a very large value with less gaps and less branches to form long contigs in both low-depth and high-depth regions.
	</help>
	<citations>
		<citation type="doi">10.1093/bioinformatics/bts174</citation>
	</citations>
</tool>
