Variance detection   = If you select yes, you should also have a reference sequence (previous line). It will create a vcf file with all the variances compared to the give reference (yes/no)


    <command detect_errors="exit_code"><![CDATA[
        ## initialize 
        
        ## vielleicht nicht notwendig
        ln -s '${seed}' 'seed.fasta' &&
        ln -s '${reference}' 'reference.fasta' &&
        ln -s '${chloroplast}' 'chloroplast.fasta' &&
        #if reads_cond.reads_sel == 'combined'
            ln -s '${read_cond.combined_reads}' 'combined.fastq' &&
        #else if  reads_cond.reads_sel == 'separate'
            ln -s '${read_cond.forward_reads}' 'forward.fastq' &&
            ln -s '${read_cond.reverse_reads}' 'reverse.fastq' &&
        #end if

        ## vielleicht nicht notwendig, wenn das Ding leer ist

        ## run
        NOVOPlasty.pl -c config.txt |& tee log.txt
        ]]></command>
    <configfiles>
        <configfile name="config.txt">
Project:
-----------------------
Project name          = Result
Type                  = ${type}
Genome Range          = ${range}
K-mer                 = ${kmer}
Max memory            = 
Extended log          = 1
Save assembled reads  = no
Seed Input            = seed.fasta
Extend seed directly  = ${eseed}
Reference sequence    = reference.fasta (optional)
Variance detection    = ${variance}
Chloroplast sequence  = chloroplast.fasta

Dataset 1:
-----------------------
Read Length           = ${read_length}
Insert size           = ${insert_size}
Platform              = ${platform}
Single/Paired         = PE
Combined reads        = 
Forward reads         = /path/to/reads/reads_1.fastq
Reverse reads         = /path/to/reads/reads_2.fastq

Heteroplasmy:
-----------------------
MAF                   = ${maf}
HP exclude list       = 
PCR-free              = {pcr_free}

Optional:
-----------------------
Insert size auto      = ${insert_size_auto}
Insert Range          = ${insert_Range}
Insert Range strict   = ${insert_range_strict}
Use Quality Scores    = ${use_quality_scores}
        </configfile>
    </configfiles>
    <inputs>



        <param name="seed" type="data" format="fasta" multiple="true" label="Select file with seed sequence" help="(Seed Input)"/>
        <param name="eseed" type="boolean" truevalue="yes" falsevalue="no" checked="false" label="Extend the seed directly, instead of finding matching reads?" help="Only use this when your seed originates from the same sample and there are no possible mismatches. (Extend seed directly)"/>
        <param name="reference" type="data" format="fasta" optional="true" label="Select reference file" help="The assembly will still be de novo, but references of the same genus can be used as a guide to resolve duplicated regions in the plant mitochondria or the inverted repeat in the chloroplast. References from different genus haven't beeen tested yet. (Reference)"/>
        <param name="chloroplast" type="data" format="fasta" label="Select chloroplast sequence" help="Only for mito_plant mode. You have to assemble the chloroplast before you assemble the mitochondria of  plants. (Chloroplast sequence)"/> <!-- todo maybe conditional -->
        <param name="read_length" type="integer" value="" label="Set read length" help="(Read Length)"/>
        <param name="insert_size" type="integer" value="" min="" max="" label="Set total insert size of your paired end reads" help="It doesn't have to be accurate but should be close enough. (Insert size)"/>
        <param name="platform" type="select" label="Select platform" help="(Platform)">
            <option value="illumina" selected="true">Illumina</option>
            <option value="ion">ION</option>
        </param>
        <!-- single will be supported in future version -->
        <!-- param name="single_paired" type="select" label="Select read type" help="(Single/Paired)">
            <option value="PE" selected="true">Paired</option>
            <option value="SE">Single</option>
        </param> -->

        <conditional name="read_cond" label="">
            <param name="read_sel" type="select" multiple="false" label="Select read file type" help="(Combined reads/Forward reads/Reverse reads)">
                <option value="combined">Combined reads</option>
                <option value="separate">Separate reads</option>
            </param>
            <when value="combined">
                <param name="combined_reads" type="data" format="fastq" label="Select file with combined reads" help="(Combined reads)"/>
            </when>
            <when value="separate">
                <param name="forward_reads" type="data" format="fastq" label="Select file with forward reads" help="(Forward reads)"/>
                <param name="reverse_reads" type="data" format="fastq" label="Select file with reverse reads" help="(Reverse reads)"/>
            </when>    
        </conditional>

        <conditional name="heteroplasmy_cond" label="">
            <param name="heteroplasmy_sel" type="select" multiple="false" label="Activate heteroplasmy" help="(heteroplasmy)">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param name="maf" type="float" value="" min="0.007" max="0.49" label="Set minor allele frequency" help="If you want to detect heteroplasmy, first assemble the genome without this option. Then give the resulting sequence as a reference and as a seed input. And give the minimum minor allele frequency for this option (0.01 will detect heteroplasmy of >1%) (MAF)"/>
                <param name="pcr" type="boolean" truevalue="yes" falsevalue="no" label="Is this a PCR-free library?" help="(PCR-free)"/>
            </when>
        </conditional>
        <param name="size_auto" type="boolean" truevalue="yes" falsevalue="no" checked="true" label="Finetune your insert size automatically" help="(Insert size auto)"/>
        <param name="insert_range" type="float" value="1.9" label="Set variation of the insert size" help="Lower it when the coverage is very high or raise it when the coverage is too low. (Insert Range)"/> <!-- todo minmax -->
        <param name="insert_range_strict" type="float" value="1.3" label="Set strict variation to resolve repetitive regions" help="(Insert Range strict)"/> <!-- todo minmax -->
        <param name="use_quality_scores" type="boolean" truevalue="yes" falsevalue="no" label="Take quality scores into account?" help="Only use this when reads have low quality, like with the 300 bp reads of Illumina. (Use Quality Scores)"/>
        <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="">
            <option value="" selected="true"></option>
            <option value="config">Config file</option>
            <option value="variance">Variance detection</option>
            <option value="elog">Extended log</option>
            <option value="log">Log</option>
        </param>   
        <!--
        todo: zusÃ¤tzlich oder anstatt?
        Save assembled reads = All the reads used for the assembly will be stored in seperate files (yes/no)
        -->
    </inputs>
    <outputs>
        <data name="" format="tabular" from_work_dir="" label="${tool.name} on ${on_string}: "/>
        

        <param name="variance" type="boolean" truevalue="yes" falsevalue="no" label="" help=""/>                       


        <data name="out_elog" format="txt" from_work_dir="elog.txt" label="${tool.name} on ${on_string}: Extended log">
            <filter>'elog' in out</filter>
        </data>  <!-- todo filename -->
        <data name="out_log" format="txt" from_work_dir="log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in out</filter>
        </data>
    </outputs>
    <tests>

        <!-- #1 default -->
        <test expect_num_outputs="1">
            <param name="" value=""/>
            <section name="ap">
                <param name="" value=""/>
            </section>
            <output name="">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>            
        </test>                                                   
    </tests>