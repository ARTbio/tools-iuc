<tool id="breseq" name="breseq" version="0.1.0">

    <description>find mutations in haploid microbial genomes</description>

    <requirements>
        <requirement type="package" version="0.34.0">breseq</requirement>
    </requirements>

    <version_command>breseq --version</version_command>

    <command detect_errors="aggressive">
        <![CDATA[
            breseq

            --num-processors \${GALAXY_SLOTS:-4}

            -o results

            #if str($reference.source) == "history":
	        #for $i, $ref in enumerate( $reference.own_genome )
                    #if $ref
                        --reference $ref
                    #end if
                #end for
            #else:
	        #for $i, $ref in enumerate( $reference.fixed_genome )
                    #if $ref
                        --reference $ref.fields.path
                    #end if
                #end for
            #end if

            #for $i, $s in enumerate( $fastqs )
                ${s}
            #end for

            #if $name
                --name '$name'
            #end if

            $polymorphism_prediction
            $predict_junctions

            &&

            tar -zcf '$zip_output' results &&

            cp results/output/index.html '$report' &&

            mkdir $report.extra_files_path &&
            cp -R results/output/* $report.extra_files_path &&

            cp results/output/log.txt '$log' &&

            cp results/output/output.gd '$output'
        ]]>
    </command>

    <inputs>
        <conditional name="reference">
            <param name="source" type="select" label="Reference source" >
                <option value="builtin">built-in</option>
                <option value="history">history</option>
            </param>
            <when value="builtin">
                <param name="fixed_genome" type="select" multiple="true" label="Galaxy Built-in Reference(s)">
                    <options from_data_table="genbank_files">
                        <filter type="sort_by" column="2"/>
                        <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                    </options>
                </param>
            </when>
            <when value="history">
                <param name="own_genome" argument="--reference" type="data" format="fasta,genbank" multiple="true" label="Fasta or Genbank Reference(s)" />
            </when>
        </conditional>

        <param name="fastqs" type="data" format="fastq" multiple="true" label="Fastq Read Files" />

        <param argument="--polymorphism-prediction" name="polymorphism_prediction" type="select" label="Mode" help="Polymorphism mode: Use to analyze a mixed population of genomes evolved from a common ancestor. It will predict variants with frequencies between 0% and 100% if a mixture model is well-supported by the read alignment evidence. Consensus mode: Use when re-sequencing a clonal haploid genome. It expects all variant alleles will be present in 100% of the sample. This mode is the default.">
            <option value="" selected="true">Consensus</option>
            <option value="--polymorphism-prediction">Polymorphism</option>
        </param>

        <param name="name" argument="--name" type="text" value="" label="Analysis Name" help="Human-readable name of the analysis run for output (DEFAULT=none)." />

        <param name="predict_junctions" type="boolean" truevalue="" falsevalue="--no-junction-prediction" checked="true" label="Predict Junctions" help="Predict new sequence junctions (default).  --no-junction-prediction is supplied if 'No' is selected.  Otherwise, there is no flag." />
    </inputs>

    <outputs>
        <data format="html" name="report" label="${tool.name} on ${on_string}: Report (Webpage)" />
        <data format="txt" name="log" label="${tool.name} on ${on_string}: Log" />
        <data format="txt" name="output" label="${tool.name} on ${on_string}: gdtools Output" />
        <data format="zip" name="zip_output" label="${tool.name} on ${on_string}: Gzipped Output" />
    </outputs>

    <tests>
        <test>
            <param name="source" value="history" />
            <param name="own_genome" value="lambda.gbk" />
            <param name="fastqs" value="lambda.short_sequence_repeats.fastq" />
            <param name="polymorphism_prediction" value="" />
            <param name="name" value="smallest" />
            <param name="predict_junctions" value="" />

            <output name="report" file="report.html" compare="sim_size" delta="100" />
            <output name="log">
                <assert_contents>
                    <has_text text="breseq --num-processors" />
                </assert_contents>
            </output>
            <output name="output" file="gdout.txt" lines_diff="8" />
            <output name="zip_output" file="gzipout.zip" compare="sim_size" delta="100" />
        </test>
    </tests>
        
    <help>
        <![CDATA[
            breseq (pronounced: \\brēz-ˈsēk\\ or breeze-seq) is a computational pipeline for the analysis of short-read re-sequencing data (e.g. Illumina, 454, IonTorrent, etc.). It uses reference-based alignment approaches to predict mutations in a sample relative to an already sequenced genome. breseq is intended for microbial genomes (<10 Mb) and re-sequenced samples that are only slightly diverged from the reference sequence (<1 mutation per 1000 bp).

**IMPORTANT:** *In order to properly view breseq's html output in Galaxy, breseq needs to be whitelisted by your galaxy admin.  Otherwise, the results will not be displayed properly and interactive controls will not function.*

breseq's primary advantages over other software programs are that it can:

- Accurately predict new sequence junctions, such as those associated with mobile element insertions.
- Integrate multiple sources of evidence for genetic changes into mutation predictions.
- Produce annotated output describing biologically relevant mutational events.

breseq was initially developed to analyze data from the Lenski long-term evolution experiment with E. coli (http://myxo.css.msu.edu/ecoli/) [http://barricklab.org/twiki/pub/Lab/ToolsBacterialGenomeResequencing/documentation/references.html#barrick2009a] [http://barricklab.org/twiki/pub/Lab/ToolsBacterialGenomeResequencing/documentation/references.html#barrick2009b].

However, breseq may be generally useful to researchers who are:

- Tracking mutations over time in microbial evolution experiments.
- Checking strains for unwanted second-site mutations after genetic manipulations.
- Identifying mutations that occur during strain improvement or after long-term culture of engineered strains.
- Discovering what mutations arise in pathogens during infection or cause antibiotic resistance.


------

**Inputs**

Breseq accepts files in FASTQ format. It does not take pair-end information into account.

You can either run in clonal (consensus) mode or search for polymorphisms in a population.

You can also select an external sequence (eg. a transposon) to detect for insertions or horizontal transfer.


------

**Outputs**

Breseq outputs a number of files. These are all condensed in a single zipped file.

It contains output files with the final results, accessible through ``output/index.html``

It also contains data files with accessory data, including:

- ``data/reference.fasta`` (file with reference genome: can be used in eg. IGV browser)
- ``data/reference.gff`` (file with genomic annotations: can be used in eg. IGV browser)
- ``data/areference.bam`` (file with read alignments: can be used in eg. IGV browser)
- ``data/unmatched.*`` (files with read that failed to align: can be used to build an assembly or to eg. blast against NCBI)
        ]]>
    </help>

    <citations>
        <citation type="doi">10.1007/978-1-4939-0554-6_12</citation>
    </citations>

</tool>