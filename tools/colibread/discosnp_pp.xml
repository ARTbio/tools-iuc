<?xml version='1.0' encoding='utf-8'?>
<tool profile="16.04" id="discosnp_pp" name="discoSnp++" version="2.2.4">
    <description>is an efficient tool for detecting SNPs without a reference genome.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="2.2.10">discosnp</requirement>
        <requirement type="package" version="0.7.16">bwa</requirement>
    </requirements>
    <command><![CDATA[
        ##create an empty input file
        touch input.lst &&

        ## if single reads
        #for $input in $list_reads
            #if $input
                #set $filename = str($input)
                #if $input.is_of_type('fasta')
                    #set $filename = $filename + ".fasta"
                #else if $input_type.is_of_type('fastq')
                    #set $filename = $filename + ".fastq"
                #end if
                ln -sf '${input}' '${filename}' &&
                echo "${filename}" >> input.lst &&
            #end if
        #end for

        ## if paired reads in a paired:list
        #set $count = 0
        #for $paired in $list_paired_reads

            #set $count += 1

            #set $filenameFWD = str($paired.forward)
            #if $paired.forward.is_of_type('fasta')
                #set $filenameFWD = $filenameFWD + ".fasta"
            #else if $paired.forward.is_of_type('fastq')
                #set $filenameFWD = $filenameFWD + ".fastq"
            #end if
            ln -sf '${paired.forward}' '${filenameFWD}' &&

            #set $filenameREV = str($paired.reverse)
            #if $paired.reverse.is_of_type('fasta')
                #set $filenameREV = $filenameREV + ".fasta"
            #else if $paired.reverse.is_of_type('fastq')
                #set $filenameREV = $filenameREV + ".fastq"
            #end if
            ln -sf '${paired.reverse}' '${filenameREV}' &&

            echo "${filenameFWD}" > "paired_${count}.lst" &&
            echo "${filenameREV}" >> "paired_${count}.lst" &&
            echo "paired_${count}.lst" >> input.lst &&
        #end for


        #if str($VCF_option.mapping) == 'reference'
            #set $reference_file = str($VCF_option.G)
            #if $VCF_option.G.is_of_type('fasta')
                #set $reference_file = $reference_file + ".fa"
            #else if $VCF_option.G.is_of_type('fastq')
                #set $reference_file = $reference_file + ".fq"
            #end if
            ln -sf '${VCF_option.G}' '${reference_file}' &&
        #end if

        run_discoSnp++.sh
        -r input.lst
        -b ${b}
        -D ${D}
        -P ${P}
        ${low_complexity}
        -k ${k}
        ${t}
        ${T}

        #if str($coverage_options_type.coverage_options) == 'auto'
            -c auto
        #else
            -c '${coverage_options_type.c}'
        #end if
        -C ${C}
        -d ${d}

        #if str($VCF_option.mapping) == 'reference'
            -G '${reference_file}'
            -M ${VCF_option.M}
            ${VCF_option.R}
        #end if

  ]]></command>

  <inputs>

      <param name='list_reads' format="fasta,fastq" type="data" multiple="true" label="Single read files" optional="True" />
      <param name='list_paired_reads' argument="-r" format="fasta,fastq" type="data_collection" collection_type="list:paired" label="List of paired read files" optional="True"/>

      <param argument="-b" type="select" label="Branching strategy">
          <option value="0">variants for which any of the two paths is branching are discarded</option>
          <option value="1">forbid SNPs for wich the two paths are branching</option>
          <option value="2">No limitation on branching</option>
      </param>

      <param argument="-D" type="integer" label="Deletion size" value="0" help="If different of 0, discoSnp++ will search for deletions of size from 1 to D included"/>
      <param argument="-P" type="integer" label="Maximum SNPs per bubble" value="1" help="discoSnp++ will search up to P SNPs in a unique bubble"/>
      <param name="low_complexity" type="boolean" checked="false" truevalue="-l" falsevalue="" label="Remove low complexity bubbles" />
      <param argument="-k" type="integer" label="Size of kmers" value="31" />

      <param argument="-t" type="boolean" checked="false" truevalue="-t" falsevalue="" label="Extends each polymorphism with left and right unitigs" />
      <param argument="-T" type="boolean" checked="false" truevalue="-T" falsevalue="" label="Extends each polymorphism with left and right contigs" />


      <conditional name="coverage_options_type" >
          <param name="coverage_options" type="select" label="Coverage option">
              <option value="auto"></option>
              <option value="custom"></option>
          </param>
          <when value="auto" />
          <when value="custom">
              <param argument="-c" type="text" label="Minimal coverage per read set" value="4" help="e.g. 4 / 4,5,17 / 4,auto,auto"/>
          </when>
      </conditional>

      <param argument="-C" type="integer" label="Maximal coverage per read set" value="2147483647" help="default value = 2^31-1" />
      <param argument="-d" type="integer" label="Max number of errors per read" value="1" help="Max number of errors per read" />

      <conditional name="VCF_option" >
          <param name="mapping" type="select" label="VCF option">
              <option value="default">Do not use reference genome</option>
              <option value="reference">Mapping with a reference genome</option>
          </param>
          <when value="default"></when>
          <when value="reference">
              <param argument="-G" type="data" format="fasta,fastq" label="Reference genome file" />
              <param argument="-M" type="integer" value="4" label="Maximal number of mapping errors" help="during BWA mapping phase" />
              <param argument="-R" type="boolean" truevalue="-R" falsevalue="" checked="false" label="Use the reference genome also in the variant calling, not only for mapping results" />
          </when>
      </conditional>

  </inputs>

  <outputs>
      <data name="vcf" from_work_dir="*_coherent.vcf" format="vcf" label="VCF with ${tool.name} on $on_string"/>
      <data name="fasta" from_work_dir="*_coherent.fa" format="fasta" label="Multifasta with ${tool.name} on $on_string"/>
  </outputs>

  <tests>
      <test>
          <param name="list_reads" value="discosnp/reads1,discosnp/reads2" ftype="fasta" />
          <param name="k" value="25"/>
          <output name="fasta" file="discosnp/multifasta.fa"/>
          <output name="vcf" file="discosnp/vcf_file.vcf" compare="diff" lines_diff="2"/>
      </test>
      <test>
          <param name="list_paired_reads">
              <collection type="list:paired">
                  <element name="Pair1">
                      <collection type="paired">
                          <element name="forward" value="discosnp/reads1" ftype="fasta"/>
                          <element name="reverse" value="discosnp/reads2" ftype="fasta"/>
                      </collection>
                  </element>
              </collection>
          </param>
          <conditional name="VCF_option">
              <param name="mapping" value="reference"/>
              <param name="G" value="discosnp/reads1" ftype="fasta"/>
          </conditional>
          <output name="fasta" file="discosnp/multifasta_paired.fa"/>
          <output name="vcf" file="discosnp/vcf_file_paired.vcf" compare="diff" lines_diff="2"/>
      </test>
  </tests>

  <help><![CDATA[

**Description**

Software discoSnp is designed for discovering Single Nucleotide Polymorphism (SNP) from raw set(s) of reads obtained with Next Generation Sequencers (NGS).
Note that number of input read sets is not constrained, it can be one, two, or more. Note also that no other data as reference genome or annotations are needed.
The software is composed by two modules. First module, kissnp2, detects SNPs from read sets. A second module, kissreads, enhance the kissnp2 results by computing per read set  and for each found SNP i/ its mean read coverage and ii/ the (phred) quality of reads generating the polymorphism.

Note that from release of DiscoSnp++-2.0.6, the tool also detects close SNPs and indels.

-------

.. class:: warningmark

**Input parameters**

-Sequences files in fasta or fastq each allele will be counted in each file individually

-Use collections: data list and/or data list paired

-Fasta sequence of a genome if case of you are willing to map the sequence extension on a reference in order to get a compliant VCF

-------

.. class:: warningmark

**Ouput parameters**

-VCF file with coordinates on the higher branch sequences or on a reference genome if provided

-Fasta file with sequence extensions around the SNP.


-------

**Web site**

https://colibread.inria.fr/software/discosnp/

  ]]></help>
    <expand macro="citations">
        <citation type="doi">10.1093/nar/gku1187</citation>
    </expand>
</tool>
