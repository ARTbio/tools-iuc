<?xml version="1.0"?>
<tool id="tetranscript" name="TEtranscript" version="@TOOL_VERSION@+@WRAPPER_VERSION@">
    <description>annotates reads to genes and transposable elements</description>
    <macros>
        <token name="@TOOL_VERSION@">2.1.4</token>
        <token name="@WRAPPER_VERSION@">galaxy0</token>
    </macros>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">tetranscripts</requirement>
        <requirement type="package" version="1.26.0">bioconductor-deseq2</requirement>
        <requirement type="package" version="1.38.0">bioconductor-deseq</requirement>
    </requirements>
    <stdio></stdio>
    <version_command>TEtranscripts --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize
        ln -s '$GTF' 'gene_annotation.gtf' &&
        ln -s '$TE' 'transposable_annotation.gtf' &&

        ## run
        TEtranscripts
            ## required
            -t
            #for $i, $s in enumerate($sample_rep)
                '${s.t}'
            #end for
            -c
            #for $i, $s in enumerate($sample_rep)
                '${s.c}'
            #end for
            --GTF 'gene_annotation.gtf'
            --TE 'transposable_annotation.gtf'
            ## optional
            --stranded $io.stranded
            $io.sortByPos
            --project result
            --mode $ap.mode
            --minread $ap.minread
            #if $ap.fragmentLength
                --fragmentLength $ap.fragmentLength
            #end if
            --iteration $ap.iteration
            --padj $ap.padj
            --foldchange $ap.foldchange
            #if $ap.deseq_cond.deseq_sel == "deseq"
                --DESeq
                --n $ap.deseq_cond.n
            #end if
            #if 'log' in $oo.out
                --verbose 3
                |& tee log.txt
            #end if
        ]]></command>
    <inputs>
        <repeat name="sample_rep" min="1" title="Select input data">
            <param argument="-t" type="data" format="bam" label="Treatment sample file"/>
            <param argument="-c" type="data" format="bam" label="Control sample file"/>
        </repeat>
        <param argument="--GTF" type="data" format="gtf" label="Select GTF file for gene annotations"/>
        <param argument="--TE" type="data" format="gtf" label="Select GTF file for transposable element annotations"/>
        <section name="io" title="Input options">
            <param argument="--stranded" type="select" label="Select library type">
                <option value="no">Library is unstranded (no)</option>
                <option value="forward">Second-strand cDNA library e.g. QIAseq stranded (forward)</option>
                <option value="reverse">First-strand cDNA library e.g. Illumina TruSeq stranded (reverse)</option>
            </param>
            <param argument="--sortByPos" type="boolean" truevalue="--sortByPos" falsevalue="" label="Are input files sorted by chromosome position?"/>
        </section>
        <section name="ap" title="Advanced parameters">
            <param argument="--mode" type="select" label="Set TE counting mode">
                <option value="multi">Distribute among all alignments (multi)</option>
                <option value="uniq">Unique mappers only (uniq)</option>
            </param>
            <param argument="--minread" type="integer" value="1" label="Set read count cutoff"/>
            <param argument="--fragmentLength" type="integer" optional="true" label="Set average length of fragment used for single-end sequencing" help="For paired-end, estimated from the input alignment file. For single-end, ignored by default."/>
            <param argument="--iteration" type="integer" value="100" label="Set maximum number of iterations used to optimize multi-reads assignment"/>
            <param argument="--padj" type="float" value="0.05" label="Set FDR cutoff for significance"/>
            <param argument="--foldchange" type="integer" value="1" label="Set fold-change ratio (absolute) cutoff for differential expression"/>
            <conditional name="deseq_cond" label="Select mode for differential analysis">
                <param name="deseq_sel" type="select" multiple="false" label="Select mode for differential analysis" help="(--DESeq)">
                    <option value="deseq2">DESeq2</option>
                    <option value="deseq">DESeq</option>
                </param>
                <when value="deseq">
                    <param argument="--n" type="select" label="Set normalization method">
                        <option value="DESeq_default">Default normalization method of DESeq (DESeq_default)</option>
                        <option value="TC">Total annotated read counts (TC)</option>
                        <option value="quant">Quantile normalization (quant)</option>
                    </param>
                </when>
                <when value="deseq2"/>
            </conditional>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" label="Select output file(s)" help="Results for gene TE analysis and sigDiff gene TE will be created if more than one dataset is applied.">
                <option value="cnttable" selected="true">cntTable</option>
                <option value="deseq2" selected="true">DESeq2.R</option>
                <option value="gte" selected="true">Gene TE Analysis</option>
                <option value="sgt" selected="true">SigDiff Gene TE</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_cnt" format="tabular" from_work_dir="result.cntTable" label="${tool.name} on ${on_string}: cntTable">
            <filter>'cnttable' in oo['out']</filter>
        </data>
        <data name="out_deseq2" format="txt" from_work_dir="result_DESeq2.R" label="${tool.name} on ${on_string}: DESeq2.R">
            <filter>'deseq2' in oo['out']</filter>
        </data>
        <data name="out_log" format="txt" from_work_dir="log.txt" label="${tool.name} on ${on_string}: log">
            <filter>'log' in oo['out']</filter>
        </data>
        <!-- created if more than one repeat is applied -->
        <data name="out_gte" format="txt" from_work_dir="result_gene_TE_analysis.txt" label="${tool.name} on ${on_string}: Gene TE analysis">
            <filter>'gte' in oo['out'] and len(sample_rep)>1</filter>
        </data>
        <!-- created if more than one repeat is applied -->
        <data name="out_sgt" format="txt" from_work_dir="result_sigdiff_gene_TE.txt" label="${tool.name} on ${on_string}: SigDiff Gene TE">
            <filter>'sgt' in oo['out'] and len(sample_rep)>1</filter>
        </data>
    </outputs>
    <tests>
        <!-- source https://github.com/mhammell-laboratory/tetoolkit-test-data -->
        <!-- #1: default -->
        <test expect_num_outputs="5">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <repeat name="sample_rep">
                <param name="t" value="treatment2.bam"/>
                <param name="c" value="control2.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="14"/>
                    <has_text_matching expression="data.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression="INFO"/>
                </assert_contents>
            </output>
            <output name="out_gte">
                <assert_contents>
                    <has_n_lines n="56"/>
                    <has_line line="baseMean&#009;log2FoldChange&#009;lfcSE&#009;stat&#009;pvalue&#009;padj"/>
                    <has_text_matching expression="TRANSPAC_LTR:Gypsy:LTR.+"/>
                </assert_contents>
            </output>
            <output name="out_sgt">
                <assert_contents>
                    <has_n_lines n="1"/>
                    <has_line line="baseMean&#009;log2FoldChange&#009;lfcSE&#009;stat&#009;pvalue&#009;padj"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2: default, without differential analysis -->
        <test expect_num_outputs="3">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="oo">
                <!-- gte and sgt shouldn't be created / shown -->
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="14"/>
                    <has_text_matching expression="data.+"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_line line="estimating dispersions"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 -->
        <test expect_num_outputs="5">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <repeat name="sample_rep">
                <param name="t" value="treatment2.bam"/>
                <param name="c" value="control2.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <section name="io">
                <param name="stranded" value="forward"/>
                <param name="sortByPos" value="true"/>
            </section>
            <section name="ap">
                <param name="mode" value="uniq"/>
                <param name="minread" value="10"/>
                <param name="fragmentLength" value="10"/>
                <param name="iteration" value="90"/>
                <param name="padj" value="0.06"/>
                <param name="foldchange" value="2"/>
                <conditional name="deseq_cond">
                    <param name="deseq_sel" value="deseq"/>
                    <param name="n" value="DESeq_default"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression="INFO.+"/>
                </assert_contents>
            </output>
            <output name="out_gte">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sgt">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #4 -->
        <test expect_num_outputs="5">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <repeat name="sample_rep">
                <param name="t" value="treatment2.bam"/>
                <param name="c" value="control2.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="io">
                <param name="stranded" value="reverse"/>
            </section>
            <section name="ap">
                <conditional name="deseq_cond">
                    <param name="deseq_sel" value="deseq"/>
                    <param name="n" value="TC"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression="INFO.+"/>
                </assert_contents>
            </output>
            <output name="out_gte">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sgt">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #5 -->
        <test expect_num_outputs="5">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <repeat name="sample_rep">
                <param name="t" value="treatment2.bam"/>
                <param name="c" value="control2.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="io">
                <param name="stranded" value="reverse"/>
            </section>
            <section name="ap">
                <conditional name="deseq_cond">
                    <param name="deseq_sel" value="deseq"/>
                    <param name="n" value="quant"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression="INFO.+"/>
                </assert_contents>
            </output>
            <output name="out_gte">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sgt">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #6 -->
        <test expect_num_outputs="5">
            <repeat name="sample_rep">
                <param name="t" value="treatment1.bam"/>
                <param name="c" value="control1.bam"/>
            </repeat>
            <repeat name="sample_rep">
                <param name="t" value="treatment2.bam"/>
                <param name="c" value="control2.bam"/>
            </repeat>
            <param name="GTF" value="gtf.gtf"/>
            <param name="TE" value="te.gtf"/>
            <section name="io">
                <param name="stranded" value="reverse"/>
            </section>
            <section name="ap">
                <conditional name="deseq_cond">
                    <param name="deseq_sel" value="deseq"/>
                    <param name="n" value="DESeq_default"/>
                </conditional>
            </section>
            <section name="oo">
                <param name="out" value="cnttable,deseq2,gte,sgt,log"/>
            </section>
            <output name="out_cnt">
                <assert_contents>
                    <has_n_lines n="406"/>
                    <has_text_matching expression="gene.+"/>
                    <has_line line="ZAM_LTR:Gypsy:LTR&#009;0&#009;0&#009;0&#009;0"/>
                </assert_contents>
            </output>
            <output name="out_deseq2">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression="INFO.+"/>
                </assert_contents>
            </output>
            <output name="out_gte">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_sgt">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

TEtranscripts is a software package that utilizes both unambiguously (uniquely) and ambiguously (multi-) mapped reads to perform differential enrichment analyses from high throughput sequencing experiments. Currently, most expression analysis software packates are not optimized for handling the complexities involved in quantifying highly repetitive regions of the genome, especially transposable elements (TE), from short sequencing reads. Although transposon elements make up between 20 to 80% of many eukaryotic genomes and contribute significantly to the cellular transcriptome output, the difficulty in quantifying their abundances from high throughput sequencing experiments has led them to be largely ignored in most studies. The TEtranscripts provides a noticeable improvement in the recovery of TE transcripts from RNA-Seq experiments and identification of peaks associated with repetitive regions of the genome.

**Input**

GTF files for gene annotation can be obtained from `UCSC RefSeq <http://genome.ucsc.edu/cgi-bin/hgTables>`_, `Ensembl <http://hammelllab.labsites.cshl.edu/software/www.ensembl.org/>`_, `iGenomes <http://support.illumina.com/sequencing/sequencing_software/igenome.html>`_ or other annotation databases. GTF files for TE annotations are customly generated from `UCSC RepeatMasker <http://genome.ucsc.edu/cgi-bin/hgTables>`_ or other annotation database. They contain two custom attributes, class_id and family_id, corresponding to the class (e.g. LINE) and family (e.g. L1) of the corresponding transposable element. A unique ID (e.g. L1Md_Gf_dup1) is also assigned for each TE annotation in the transcript_id attribute.

**Output**

TEtranscripts quantifies both gene and transposable element (TE) transcript abundances from RNA-Seq experiments, utilizing both uniquely and ambiguously mapped short read sequences. It processes the short reads alignments (BAM files) and proportionally assigns read counts to the corresponding gene or TE based on the user-provided annotation files (GTF files). In addition, TEtranscripts combines multiple libraries and perform differential analysis using DESeq2.

.. class:: infomark

**References**

More information are available on the `project website <http://hammelllab.labsites.cshl.edu/software/#TEtranscripts>`_ and `github <https://github.com/mhammell-laboratory/TEtranscripts>`_.

    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btv422</citation>
        <citation type="doi">10.1007/978-1-4939-7710-9_11</citation>
    </citations>
</tool>