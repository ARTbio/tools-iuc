<tool id="alleyoop" name="Alleyoop" version="0.3.3">
    <description>- post-processing and QC of Slamdunk analyses</description>
    <requirements>
        <requirement type="package" version="0.3.3">slamdunk</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    #import re

    mkdir ./filter &&
    #for $bam in $Reads:
        #set $ext = ""
        #set $bam_name = re.sub('[^\w\-\.]', '_', str($bam.element_identifier))
        #if not $bam_name.endswith('.bam')
            #set $ext = ".bam"
        #end if
        ln -s '$bam' './filter/${bam_name}${ext}' &&
        ln -s '$bam.metadata.bam_index' './filter/${bam_name}${ext}.bai' &&
    #end for

    mkdir ./count &&
    #for $tsv in $CountTsvs:
        #set $ext = ""
        #set $tsv_name = re.sub('[^\w\-\.]', '_', str($tsv.element_identifier))
        #if not $tsv_name.endswith('_tcount.tsv')
            #set $ext = "_tcount.tsv"
        #end if
        ln -s '$tsv' './count/${tsv_name}${ext}' &&
    #end for

    mkdir ./snp &&
    #for $vcf in $Variants:
        #set $ext = ""
        #set $vcf_name = re.sub('[^\w\-\.]', '_', str($vcf.element_identifier))
        #if not $vcf_name.endswith('_snp.vcf')
            #set $ext = "_snp.vcf"
        #end if
        ln -s '$vcf' './snp/${vcf_name}${ext}' &&
    #end for
    
    #if $reference_source.reference_source_selector == 'history':
        ln -f -s '$reference_source.ref_file' reference.fa &&
    #else:
        ln -f -s '$reference_source.ref_file.fields.path' reference.fa &&
    #end if
    
    alleyoop summary -o ./summary.txt -t ./count ./filter/*bam &&

	alleyoop rates -o ./stats -r reference.fa -mq $advanced.minBaseQual ./filter/*bam &&
	 
	alleyoop utrrates -o ./stats -r reference.fa -b $Reference -l $readLength -mq $advanced.minBaseQual ./filter/*bam &&
	
	alleyoop tcperreadpos -o ./stats -r reference.fa -s ./snp -l $readLength -mq $advanced.minBaseQual ./filter/*bam &&
	
	alleyoop tcperutrpos -o ./stats -r reference.fa -s ./snp -l $readLength -b $Reference -mq $advanced.minBaseQual ./filter/*bam

    #if $bams:
        && alleyoop read-separator -o ./splitbams -s ./snp -r reference.fa ./filter/*bam
    #end if

    ]]></command>
    <inputs>
        <conditional name="reference_source">
            <param name="reference_source_selector" type="select" label="Reference genome FASTA file" help="Select a built-in FASTA file (if available) or one from the history">
                <option value="cached">Use a built-in FASTA</option>
                <option value="history">Use a FASTA from history</option>
            </param>
            <when value="cached">
                <param name="ref_file" type="select" label="Use built-in FASTA" help="Select genome from the list">
                    <options from_data_table="all_fasta">
                        <filter type="sort_by" column="2" />
                        <validator type="no_options" message="No reference genomes are available" />
                    </options>
                    <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
                </param>
            </when>
            <when value="history">
                <param name="ref_file" type="data" format="fasta" label="Use the following dataset as the FASTA" help="You can upload a FASTA sequence to the history and use it as reference" />
            </when>
        </conditional>
        <param type="data" name="Reference" format="bed" />
        <param type="data" name="Reads" format="sam,bam" multiple="True"/>
        <param type="data" name="CountTsvs" format="tabular" multiple="True"/>
        <param type="data" name="Variants" format="vcf" multiple="True"/>
        <section name="advanced" title="Advanced settings." expanded="false">
            <param name="minBaseQual" type="integer" label="Minimum base quality"
                value="27" min="0"
                help="Minimum base quality for T>C conversions (default: 27)." />
        </section>
        <param name="readLength" type="integer" label="Read length"
            value="50" min="50" help="Maximum read length (before trimming)." />
        <param name="bams" type="boolean" truevalue="True" falsevalue="False" checked="False" label="Output TC separated BAM files?" help="If this option is set to Yes, the Alleyoop read-separator module will be run to output BAM files of separated T>C reads from non T>C reads. Default: No"/>
    </inputs>
    <outputs>
         <collection name="outputSummary" type="list" label="${tool.name} on ${on_string}: Summary tables">
            <discover_datasets pattern="(?P&lt;name&gt;.+)\.txt$" format="tabular" directory="." visible="false" />
        </collection>
        <collection name="outputStats" type="list" label="${tool.name} on ${on_string}: Stats tables">
            <discover_datasets pattern="(?P&lt;name&gt;.+)\.csv$" format="tabular" directory="./stats" visible="false" />
        </collection>
        <collection name="outputTCReads" type="list" label="${tool.name} on ${on_string}: TC Reads">
            <discover_datasets pattern="(?P&lt;name&gt;.+)_TCReads.bam$" format="bam" directory="./splitbams" visible="false" />
            <filter>bams</filter>
        </collection>
        <collection name="outputbkgdReads" type="list" label="${tool.name} on ${on_string}: Background Reads">
            <discover_datasets pattern="(?P&lt;name&gt;.+)_backgroundReads.bam$" format="bam" directory="./splitbams" visible="false" />
            <filter>bams</filter>
        </collection>
    </outputs>
    <tests>
        <!-- Ensure default output works -->
        <test>
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" ftype="fasta" value="ref.fa" />
            <param name="Reference" ftype="bed" value="actb.bed" />
            <param name="Reads" ftype="bam" value="reads1.bam,reads2.bam" />
            <param name="CountTsvs" ftype="tabular" value="reads1_tcount.tsv,reads2_tcount.tsv" />
            <param name="Variants" ftype="vcf" value="reads1_snp.vcf,reads2_snp.vcf" />
            <param name="readLength" value="100" />
            <param name="minBaseQual" value="27" />
            <output_collection name="outputSummary" count="2">
                <element name="summary" file="summary.txt" ftype="tabular" />
            </output_collection>
            <output_collection name="outputStats" count="8">
                <element name="reads1_overallrates" file="reads1_overallrates.csv" ftype="tabular" />
            </output_collection>
        </test>
        <!-- Ensure BAM output works -->
        <test>
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" ftype="fasta" value="ref.fa" />
            <param name="Reference" ftype="bed" value="actb.bed" />
            <param name="Reads" ftype="bam" value="reads1.bam,reads2.bam" />
            <param name="CountTsvs" ftype="tabular" value="reads1_tcount.tsv,reads2_tcount.tsv" />
            <param name="Variants" ftype="vcf" value="reads1_snp.vcf,reads2_snp.vcf" />
            <param name="readLength" value="100" />
            <param name="minBaseQual" value="27" />
            <param name="bams" value="True" />
            <output_collection name="outputTCReads" count="2">
                <element name="reads1" file="reads1_TCReads.bam" ftype="bam" />
            </output_collection>
            <output_collection name="outputbkgdReads" count="2">
                <element name="reads1" file="reads1_backgroundReads.bam" ftype="bam" />
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
SLAMseq
=======

SLAMseq is a novel sequencing protocol that directly uncovers 4-thiouridine incorporation events in RNA by high-throughput sequencing. When combined with metabolic labeling protocols, SLAM-seq allows to study the intracellular RNA dynamics, from transcription, RNA processing to RNA stability.

Original publication: `Herzog et al., Nature Methods, 2017; doi:10.1038/nmeth.4435 <https://www.nature.com/nmeth/journal/vaop/ncurrent/full/nmeth.4435.html>`_

Alleyoop
========

Alleyoop (Additional sLamdunk heLpEr tools for anY diagnOstics Or Plots) is a collection of tools for post-processing and running diagnostics on slamdunk analyses. This tool works on the output of the **Slamdunk** tool and requires all the inputs listed in the table below.
                 
===============  ==========================================================================================================================================================
Parameter        Description
===============  ==========================================================================================================================================================
**Genome**       The reference fasta file (Genome assembly).
**Reference**    BED-file containing coordinates for 3' UTRs.
**Reads**        Slamdunk Filtered BAM files.
**Counts**       Slamdunk Count TSV files.
**Variants**     Slandunk VCF files.
**Read length**  Maximum length of reads (usually 50, 100, 150).
===============  ==========================================================================================================================================================

This tool runs the **Alleyoop** *summary*, *rates*, *utrrates*, *tcperreadpos* and *tcperutrpos* modules and outputs:

* Tab-separated *summary* file with mapping statistics
* Tab-separated *stats* files

These files can be summarised and visualised with MultiQC.

Optionally, the *read-separator* module can be run to output BAM files of separated T>C and non T>C reads.

    ]]></help>
    <citations>
        <citation type="bibtex">
            @misc{renameTODO,
            author = {LastTODO,
            FirstTODO},
            year = {TODO},
            title = {TODO},
            url =
            {http://t-neumann.github.io/slamdunk},
            }
        </citation>
    </citations>
</tool>
