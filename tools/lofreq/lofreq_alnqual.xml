<tool id="lofreq_alnqual" name="Add BAQ and IDAQ" version="@WRAPPER_VERSION@0">
    <description>to BAM with LoFreq</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        @PREPARE_REF@
        lofreq alnqual -b $extended $no_baq $no_idaq $recompute_all '$reads' '$reference_fasta_fn' > '$output'
    ]]></command>
    <inputs>
        <param type="data" name="reads" format="bam" />
        <expand macro="reference_interface" />
        <param name="extended" argument="-e" type="boolean" truevalue="-e" falsevalue="" label="Use default instead of extended BAQ" help="Extended BAQ gives better sensitivity with lower specificity" />
        <param name="no_baq" argument="-B" type="boolean" truevalue="-B" falsevalue="" label="Skip base alignment quality calculation" />
        <param name="no_idaq" argument="-A" type="boolean" truevalue="-A" falsevalue="" label="Skip indel alignment quality calculation" />
        <param name="recompute_all" argument="-r" type="boolean" truevalue="-r" falsevalue="" label="Overwrite existing values with computed values" />
    </inputs>
    <outputs>
        <data name="output" format="bam" label="${tool.name} to ${on_string}" />
    </outputs>
    <tests>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <output name="output" file="alnqual-out1.bam" />
        </test>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <param name="no_baq" value="true" />
            <output name="output" file="alnqual-out2.bam" />
        </test>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <param name="no_idaq" value="true" />
            <output name="output" file="alnqual-out3.bam" />
        </test>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <param name="extended" value="true" />
            <output name="output" file="alnqual-out4.bam" />
        </test>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <param name="recompute" value="true" />
            <output name="output" file="alnqual-out5.bam" />
        </test>
    </tests>
    <help><![CDATA[
        lofreq alnqual: add base- and indel-alignment qualities (BAQ, IDAQ) to BAM file

Usage:   lofreq alnqual [options] <aln.bam> <ref.fasta>
Options:
         -b       BAM output (instead of SAM)
         -u       Uncompressed BAM output (for piping)
         -S       The input is SAM with header
         -e       Use default instead of extended BAQ (the latter gives better sensitivity but lower specificity)
         -B       Don't compute base alignment qualities
         -A       Don't compute indel alignment qualities
         -r       Recompute i.e. overwrite existing values
- Output BAM will be written to stdout.
- Only reads containing indels will contain indel-alignment qualities (tags: ai and ad).
- Do not change the alignmnent after running this, i.e. use this as last postprocessing step!
- This program is based on samtools. BAQ was introduced by Heng Li PMID:21320865


    ]]></help>
    <expand macro="citations" />
</tool>