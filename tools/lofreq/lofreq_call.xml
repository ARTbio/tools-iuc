<tool id="lofreq_call" name="Call variants" version="@WRAPPER_VERSION@0">
    <description>with LoFreq</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        ## prepare reference genome and mapped reads input
        @PREPARE_REF@
        ln -s '$reads' reads.bam &&
        ln -s -f '${reads.metadata.bam_index}' reads.bam.bai &&

        ## call variants with lofreq

        ## make lofreq stick to tool contract by
        ## generating tmp output inside job working dir
        mkdir pp-tmp &&
        export TMPDIR=pp-tmp &&

        lofreq call-parallel --pp-threads \${GALAXY_SLOTS:-1} --verbose

        --ref '$reference_fasta_fn' --out variants.vcf $variant_types

        #if str($regions.restrict_to_region) == 'regions_from_file':
            --bed '$regions.bed'
        #end if

        #if str($call_control.set_call_options) == 'yes':
            --min-cov $call_control.coverage.min_cov
            --max-depth $call_control.coverage.max_depth
            $call_control.pe.use_orphan
            --min-bq $call_control.bc_quals.min_bq
            --min-alt-bq $call_control.bc_quals.min_alt_bq
            --def-alt-bq $call_control.bc_quals.def_alt_bq
            --min-jq $call_control.bc_quals.min_jq
            --min-alt-jq $call_control.bc_quals.min_alt_jq
            --def-alt-jq $call_control.bc_quals.def_alt_jq
            $call_control.align_quals.no_baq
            $call_control.align_quals.no_idaq
            $call_control.align_quals.del_baq
            $call_control.align_quals.no_ext_baq
            --min-mq $call_control.map_quals.min_mq
            --max-mq $call_control.map_quals.max_mq
            $call_control.map_quals.no_mq
            #if str($call_control.source_qual.use_src_qual.src_qual):
                $call_control.source_qual.use_src_qual.src_qual
                #set $ign_vcfs = ','.join([str($ign_vcf) for $ign_vcf in $call_control.source_qual.use_src_qual.ign_vcf if $ign_vcf])
                #if $ign_vcfs:
                    --ign-vcf "$ign_vcfs"
                #end if
                --def-nm-q $call_control.source_qual.use_src_qual.def_nm_q
            #end if
        #end if

        --sig $filter_control.sig
        #set $bonf_factor = $filter_control.bonf or 'dynamic'
        --bonf $bonf_factor
        $filter_control.others

        reads.bam 2>&1

        ## in case of errors add the log files produced
        ## by the parallel workers to stderr
        || (tool_exit_code=\$? && cat pp-tmp/lofreq2_call_parallel*/*.log 1>&2 && exit \$tool_exit_code)

        ## work around a bug in lofreq call-parallel
        ## https://github.com/CSB5/lofreq/issues/85
        ## that causes the output format to be vcf.gz with certain filter
        ## combinations.
        #if str($bonf_factor) != 'dynamic':
            #if '--no-default-filter' in str($filter_control.others):
                && ln -s variants.vcf variants.vcf.gz
                && gzip -df variants.vcf.gz
            #end if
        #end if
    ]]></command>
    <inputs>
        <param type="data" name="reads" format="bam" label="Input reads in BAM format" />
        <expand macro="reference_interface" />
        <conditional name="regions">
            <param name="restrict_to_region" type="select"
            label="Call variants across">
                <option value="genome">Whole reference</option>
                <option value="regions_from_file">Regions specified in BED</option>
            </param>
            <when value="genome" />
            <when value="regions_from_file">
                <param argument="--bed" type="data" format="bed"
                label="BED dataset with regions to examine" />
            </when>
        </conditional>
        <param name="variant_types" type="select"
        label="Types of variants to call"
        help="Note: When including indels in the called variants you should preprocess your input data to include indel alignment qualities">
            <option value="--call-indels">SNVs and indels</option>
            <option value="" selected="True">Only SNVs</option>
            <option value="--only-indels">Only indels</option>
        </param>
        <conditional name="call_control">
            <param name="set_call_options" type="select"
            label="Variant calling parameters">
                <option value="no">Use default settings</option>
                <option value="yes">Configure settings</option>
            </param>
            <when value="no" />
            <when value="yes">
                <section name="coverage" title="Coverage" expanded="true">
                    <param name="min_cov" argument="--min-cov" type="integer" value="1" min="1"
                    label="Minimal coverage" />
                    <param name="max_depth" argument="--max-depth" type="integer" value="1000000" min="1"
                    label="Coverage cap" />
                </section>
                <section name="pe" title="Paired reads" expanded="true">
                    <param name="use_orphan" argument="--use-orphan" type="boolean" truevalue="--use-orphan" falsevalue="" checked="False"
                    label="Use reads from anomalously mapped pairs"
                    help="Applies to paired-end reads only. If set to true, reads from pairs that are flagged as non-proper pairs (SAM/BAM FLAG field 2) will be used in variant calling. The default is to ignore such reads." />
                </section>
                <section name="bc_quals" title="Base-calling quality" expanded="true">
                    <param name="min_bq" argument="--min-bq" type="integer" value="6" label="Mimimum baseQ" />
                    <param name="min_alt_bq" argument="--min-alt-bq" type="integer" value="6" label="Mimimum baseQ for alternate bases" />
                    <param name="def_alt_bq" argument="--def-alt-bq" type="integer" value="0" label="Overwrite baseQs of alternate bases with this value" />
                    <param name="min_jq" argument="--min-jq" type="integer" value="0" label="Minimum joinedQ" />
                    <param name="min_alt_jq" argument="--min-alt-jq" type="integer" value="0" label="Minimum joinedQ for alternate bases" />
                    <param name="def_alt_jq" argument="--def-alt-jq" type="integer" value="0" label="Overwrite joinedQs of alternate bases with this value" />
                </section>
                <section name="align_quals" title="Base alignment quality" expanded="true">
                    <param name="no_baq" argument="--no-baq" type="boolean" truevalue="" falsevalue="--no-baq" checked="True" label="Use base-alignment quality scores" />
                    <param name="no_idaq" argument="--no-idaq" type="boolean" truevalue="" falsevalue="--no-idaq" checked="True" label="Use IDAQ values" />
                    <param name="del_baq" argument="--del-baq" type="boolean" truevalue="--del-baq" falsevalue="" label="Delete pre-existing BAQ values" help="Computes BAQ values regardless of their presence in the input BAM" />
                    <param name="no_ext_baq" argument="--no-ext-baq" type="boolean" truevalue="" falsevalue="--no-ext-baq" checked="True" label="Use extended BAQ?" help="Choose whether 'normal' BAQ (samtools default) or extended BAQ (lofreq default) should be used. Note: Either will be computed on the fly if not already present in lb tag." />
                </section>
                <section name="map_quals" title="Mapping quality" expanded="true">
                    <param name="min_mq" argument="--min-mq" type="integer" value="0" label="Minimum mapping quality" />
                    <param name="max_mq" argument="--max-mq" type="integer" value="255" label="Maximum mapping quality" />
                    <param name="no_mq" argument="--no-mq" type="boolean" truevalue="" falsevalue="--no-mq" checked="True" label="Consider mapping quality during variant calling?" />
                </section>
                <section name="source_qual" title="Source quality" expanded="true">
                    <conditional name="use_src_qual">
                        <param argument="--src-qual" name="src_qual" type="select"
                        label="Enable computation of source quality">
                            <option value="">No</option>
                            <option value="--src-qual">Yes, compute source quality</option>
                        </param>
                        <when value="" />
                        <when value="--src-qual">
                            <param name="def_nm_q" argument="--def-nm-q" type="integer" min="-1" value="-1"
                            label="Replace non-match base qualities with this value"
                            help="Leave at -1 (the default) to use original base qualities also at non-matching positions." />
                            <param name="ign_vcf" argument="--ign-vcf" type="data" format="vcf" optional="true" multiple="true" label="VCF input(s) with variants to ignore for source quality computation" />
                        </when>
                    </conditional>
                </section>
            </when>
        </conditional>
        <conditional name="filter_control">
            <param name="filter_type" type="select" label="Variant filter parameters">
                <option value="set_all_off">Strictly no filtering</option>
                <option value="set_no_default">Preset QUAL score-based filtering</option>
                <option value="set_lofreq_standard" selected="true">Preset filtering on QUAL score + coverage + strand bias (lofreq call default)</option>
                <option value="set_custom">Custom filter settings/combinations</option>
            </param>
            <when value="set_all_off">
                <param name="sig" type="hidden" value="1" />
                <param name="bonf" type="hidden" value="1" />
                <param name="others" type="hidden" value="--no-default-filter" />
            </when>
            <when value="set_no_default">
                <param name="sig" type="hidden" value="0.01" />
                <param name="bonf" type="hidden" value="dynamic" />
                <param name="others" type="hidden" value="--no-default-filter" />
            </when>
            <when value="set_lofreq_standard">
                <param name="sig" type="hidden" value="0.01" />
                <param name="bonf" type="hidden" value="dynamic" />
                <param name="others" type="hidden" value="" />
            </when>
            <when value="set_custom">
                <param name="sig" type="float" value="0.01" min="0" max="1"
                label="Significance threshold for calls"/>
                <param name="bonf" type="integer" value="0" min="0"
                label="Bonferroni correction factor for multiple testing"
                help="Set to zero to determine dynamically from actual number of variant tests performed. Dynamic detection will calculate separate correction factors for SNVs and indels" />
                <param name="others" type="boolean" truevalue="" falsevalue="--no-default-filter" checked="true"
                label="Apply default coverage and strand-bias filter?"
                help="" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="variants" from_work_dir="variants.vcf" format="vcf" />
    </outputs>
    <tests>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <output name="variants" file="call-out1.vcf" lines_diff="4" />
        </test>
        <test>
            <param name="reads" ftype="bam" value="lofreq-in1.bam" />
            <param name="ref_selector" value="history" />
            <param name="ref" ftype="fasta" value="pBR322.fa" />
            <conditional name="filter_control">
                <param name="filter_type" value="set_all_off" />
            </conditional>
            <output name="variants" file="call-out2.vcf" lines_diff="4" />
        </test>
    </tests>
    <help><![CDATA[
lofreq call: call variants from BAM file

Options:


- Base-call quality:
    -q | --min-bq INT            Skip any base with baseQ smaller than INT [6]
    -Q | --min-alt-bq INT        Skip alternate bases with baseQ smaller than INT [6]
    -R | --def-alt-bq INT        Overwrite baseQs of alternate bases (that passed bq filter) with this value (-1: use median ref-bq; 0: keep) [0]
    -j | --min-jq INT            Skip any base with joinedQ smaller than INT [0]
    -J | --min-alt-jq INT        Skip alternate bases with joinedQ smaller than INT [0]
    -K | --def-alt-jq INT        Overwrite joinedQs of alternate bases (that passed jq filter) with this value (-1: use median ref-bq; 0: keep) [0]

- Base-alignment (BAQ) and indel-aligment (IDAQ) qualities:
    -B | --no-baq                Disable use of base-alignment quality (BAQ)
    -A | --no-idaq               Don't use IDAQ values (NOT recommended under ANY circumstances other than debugging)
    -D | --del-baq               Delete pre-existing BAQ values, i.e. compute even if already present in BAM
    -e | --no-ext-baq            Use 'normal' BAQ (samtools default) instead of extended BAQ (both computed on the fly if not already present in lb tag)

- Mapping quality:
    -m | --min-mq INT            Skip reads with mapping quality smaller than INT [0]
    -M | --max-mq INT            Cap mapping quality at INT [255]
    -N | --no-mq                 Don't merge mapping quality in LoFreq's model

- Source quality:
    -s | --src-qual              Enable computation of source quality
    -S | --ign-vcf FILE          Ignore variants in this vcf file for source quality computation. Multiple files can be given separated by commas
    -T | --def-nm-q INT          If >= 0, then replace non-match base qualities with this default value [-1]

- Misc.:
    -C | --min-cov INT           Test only positions having at least this coverage [1]
                                (note: without --no-default-filter default filters (incl. coverage) kick in after predictions are done)
    -d | --max-depth INT         Cap coverage at this depth [1000000]
         --use-orphan            Count anomalous read pairs (i.e. where mate is not aligned properly)
         --plp-summary-only      No variant calling. Just output pileup summary per column
         --no-default-filter     Don't run default 'lofreq filter' automatically after calling variants
]]></help>
    <expand macro="citations" />
</tool>
