<?xml version="1.0"?>
<tool id="delly_classify" name="Delly classify" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>somatic or germline copy-number variants</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize
#if $samples.is_of_type('vcf')
    bcftools view -Ob '$samples' > 'sample.bcf.gz' &&
    bcftools index 'sample.bcf.gz' &&
#else
    ln -s '${samples}' 'sample.bcf.gz' &&
    ln -s '${samples.metadata.bcf_index}' 'sample.bcf.gz.csi' &&
#end if

## run
delly classify
## generic options
--filter $generic.filter
--outfile 'result.bcf'
--minsize $generic.minsize
--maxsize $generic.maxsize
$generic.pass
## somatic options
#if $sv.mode_cond.mode_sel == 'somatic'
    --samples '$somatic.samples'
    --pgerm $somatic.pgerm
    --cnoffset $somatic.cnoffset
#end if   
## germline options
#if $sv.mode_cond.mode_sel == 'germline'
    --ploidy $germline.ploidy
    --qual $germline.qual
    --maxsd $germline.maxsd
#end if
## samples
'sample.bcf.gz' ## input

## postprocessing
@LOG@
@VCF@
    ]]></command>
    <inputs>
        <expand macro="samples" format="bcf,vcf" multiple="false" label="Select file"/>
        <section name="generic" title="Generic options" expanded="true">
            <param argument="--filter" type="select" label="Select filter mode">
                <option value="somatic" selected="true">Somatic</option>
                <option value="germline">Germline</option>
            </param>
            <expand macro="minsize" default="1000" label="Set minimum CNV size"/>
            <expand macro="maxsize" default="500000000" label="Set maximum CNV size"/>
            <expand macro="pass"/>
        </section>
        <section name="sv" title="SV calling options" expanded="true">
            <conditional name="mode_cond">
                <param argument="mode_sel" type="select" label="Select filter mode">
                    <option value="somatic" selected="true">Somatic</option>
                    <option value="germline">Germline</option>
                </param>
                <when value="somatic">
                    <param argument="--samples" type="data" format="tabular" label="Select sample file" help="Two-column sample file listing sample name and tumor or control."/>
                    <param argument="--pgerm" type="float" value="0.05" label="Set probability germline"/>
                    <expand macro="cnoffset" deault="0.2"/>
                </when>
                <when value="germline">
                    <expand macro="ploidy"/>
                    <param argument="--qual" type="integer" value="50" label="Set minimum site quality"/>
                    <param argument="--maxsd" type="float" value="0.15" label="Set maximum population SD"/>
                </when>
            </conditional>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="bcf" selected="true">BCF</option>
                <option value="vcf">VCF</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <expand macro="vcf"/>
        <expand macro="bcf"/>
        <expand macro="log"/>
    </outputs>
    <tests>
        <!-- no test implemented for parameter  -->

        <!-- #1 somatic, default -->
        <test expect_num_outputs="3">
            <param name="samples" value="call_1.bcf.gz"/>
            <section name="sv">
                <conditional name="mode_cond">
                    <param name="mode_sel" value="somatic"/>
                    <param name="samples" value="samples.tsv"/>
                </conditional>
            </section>          
            <section name="oo">
                <param name="out" value="bcf,vcf,log"/>
            </section>
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 somatic -->
        <test expect_num_outputs="3">
            <param name="samples" value="call_1.bcf.gz"/>
            <section name="generic">
                <param name="minsize" value="1001"/>
                <param name="maxsize" value="500000001"/>
                <param name="pass" value="true"/>
            </section>
            <section name="sv">
                <conditional name="mode_cond">
                    <param name="mode_sel" value="somatic"/>
                    <param name="samples" value="samples.tsv"/>
                    <param name="pgerm" value="0.04"/>
                    <param name="cnoffset" value="0.19"/>
                </conditional>
            </section>          
            <section name="oo">
                <param name="out" value="bcf,vcf,log"/>
            </section>
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
        </test>
        <!-- #3 germline, default -->
        <test expect_num_outputs="3">
            <param name="samples" value="call_1.bcf.gz"/>
            <section name="sv">
                <conditional name="mode_cond">
                    <param name="mode_sel" value="germline"/>
                </conditional>
            </section>          
            <section name="oo">
                <param name="out" value="bcf,vcf,log"/>
            </section>
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
        </test>        
        <!-- #4 germline -->
        <test expect_num_outputs="3">
            <param name="samples" value="call_1.bcf.gz"/>
            <section name="sv">
                <conditional name="mode_cond">
                    <param name="mode_sel" value="germline"/>
                    <param name="ploidy" value="true"/>
                    <param name="qual" value="51"/>
                    <param name="maxsd" value="0.16"/>
                </conditional>
            </section>          
            <section name="oo">
                <param name="out" value="bcf,vcf,log"/>
            </section>
            <output name="out_bcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_size value="0"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Delly *classify* for somatic or germline copy-number variants.

**Input**

...

**Output**

...

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>