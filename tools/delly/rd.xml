<?xml version="1.0"?>
<tool id="delly_rd" name="Delly read-depth normalization (rd)" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="18.01">
    <description>generates read-depth profiles</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
## initialize

## run
delly rd
## generic options
-g '$generic.g'
-q '$generic.q'
-m '$generic.m'
-y $generic.y
-e $generic.e
#if 's' in $oo.out
    -s 'stats.tsv.gz' ## todo
#end if
-o 'result.tsv.gz'
$generic.a
## window options
-i $window.i
-j $window.j
-b '$window.b'
-k $window.k
## gc options
-w $gc.w
-f $gc.f
-r '$gc.r'
-d $gc.d
-p $gc.p
-n $gc.n
## samples
'$samples' ## input

## postprocessing
@LOG@
    ]]></command>
    <inputs>
        <expand macro="samples" multiple="false" label="Select file"/>
        <section name="generic" title="Generic options" expanded="true">
            <param argument="-g" type="data" format="fasta" label="Select genome file"/>
            <param argument="-q" type="integer" value="10" label="Set minimum mapping quality"/>
            <param argument="-m" type="data" format="fasta" label="Select mappability map file"/>
            <param argument="-y" type="integer" value="2" label="Set baseline ploidy"/>
            <param argument="-e" type="float" min="0.0" max="1.0" value="0.97" label="Set minimum fragment uniqueness"/>
            <param argument="-a" type="boolean" truevalue="-a" falsevalue="" label="Use mappable bases for window size?"/>
        </section>
        <section name="window" title="Window options" expanded="true">
            <param argument="-i" type="integer" value="=10000" label="Set window size"/>
            <param argument="-j" type="integer" value="10000" label="Set window offset"/>
            <param argument="-b" type="data" format="BED" optional="true" label="Select input BED file"/>
            <param argument="-k" type="float" min="0.0" max="1.0" value="0.25" label="Set minimum callable window fraction"/>
        </section>
        <section name="gc" title="GC options" expanded="true">
            <param argument="-w" type="integer" value="10000" label="Set scan window size"/>
            <param argument="-f" type="float" min="0.0" max="1.0" value="0.8" label="Set uniqueness filter for scanning windows"/>
            <param argument="-r" type="data" format="BED" optional="true" label="Select file with scanning regions"/>
            <param argument="-d" type="integer" value="3" label="Set count cutoff" help="(median + 3 * mad)"/>
            <param argument="-p" type="float" min="0.0" max="1.0" value="0.0005" label="Set threshold to exclude extreme GC fraction"/>
            <param argument="-n" type="boolean" truevalue="-n" falsevalue="" label="Skip scan window selection?"/>
        </section>
        <section name="oo" title="Output options">
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)">
                <option value="result" selected="true">Result</option>
                <option value="s">Stats</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_result" format="tsv.gz" from_work_dir="result.tsv.gz" label="${tool.name} on ${on_string}: Result">
            <filter>'result' in oo['out']</filter>
        </data>
        <data name="out_stats" format="tsv.gz" from_work_dir="stats.tsv.gz" label="${tool.name} on ${on_string}: Stats">
            <filter>'result' in oo['out']</filter>
        </data>
        <expand macro="log"/>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test>
            <param argument="samples" value=""/>
            <section name="generic">
                <param argument="-g" value=""/>
                <param argument="-m" value=""/>
            </section>
            <section name="oo" title="Output options">
                <param name="out" value="result,log"/>
                </param>
            </section>
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_stats">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+Scanning Windows"/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 default -->
        <test>
            <param argument="samples" value=""/>
            <section name="generic">
                <param argument="-g" value=""/>
                <param argument="-q" value="10"/>
                <param argument="-m" value=""/>
                <param argument="-y" value="2" label="Set baseline ploidy"/>
                <param argument="-e" value="0.97" label="Set minimum fragment uniqueness"/>
                <param argument="-a" value=""/>
            </section>
            <section name="window">
                <param argument="-i" value="=10000"/>
                <param argument="-j" value="10000"/>
                <param argument="-b" value=""/>
                <param argument="-k" value="0.25"/>
            </section>
            <section name="gc">
                <param argument="-w" value="10000"/>
                <param argument="-f" value="0.8"/>
                <param argument="-r" value=""/>
                <param argument="-d" value="3"/>
                <param argument="-p" value="0.0005"/>
                <param argument="-n" value=""/>
            </section>
            <section name="oo" title="Output options">
                <param name="out" value="result,s,log"/>
                </param>
            </section>
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_stats">
                <assert_contents>
                    <has_n_lines n="0"/>
                </assert_contents>
            </output>
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+Scanning Windows"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

Delly *read-depth normalization (rd)* generate read-depth profiles.

**Input**

- mappability map which can be downloaded `here <https://gear.embl.de/data/delly/>`_.

**Output**

...

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>