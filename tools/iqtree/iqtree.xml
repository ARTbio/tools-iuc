<tool id="iqtree" name="IQ-TREE" version="1.5.5" >
    <description>Efficient phylogenomic software by maximum likelihood</description>
    <macros>
        <import>iqtree.macro.command.xml</import>
        <import>iqtree.macro.inputs.xml</import>
        <import>iqtree.macro.help.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="1.5.5">iqtree</requirement>
    </requirements> 
    <expand macro="command" />
    <expand macro="inputs" />
    <outputs>
        <data name='bionj' format='nhx' from_work_dir="*.bionj" />
        <data name='treefile' format='nhx' from_work_dir="*.treefile" />
        <data name='contree' format='nhx' from_work_dir="*.contree" />
        <data name='mldist' format='mldist' from_work_dir="*.mldist" />
        <data name='splits.nex' format='nex' from_work_dir="*.splits.nex" />
        <data name='iqtree' format='iqtree' from_work_dir="*.iqtree" />
    </outputs>
    <tests>
        <test>
            <param name="seed" value="1257" />
            <param name="st" value="AA" />
            <param name="s" value="example.phy" />
            <param name="m" value="TESTNEW" />
            <param name="msub" value="nuclear" />
            <param name="madd" value="LG4M,LG4X" />
            <param name="merit" value="AICc" />
            <param name="bb" value="2000" />
            <output name='bionj'>
    	        <assert_contents>
    	            <has_text_matching expression=".*Human.*Whale.*" />
    	        </assert_contents>
            </output>
            <output name='iqtree'>
    	        <assert_contents>
    	            <has_text_matching expression="VT\+F\+R3(\s+((-|\d|\.)+))+" />
    	        </assert_contents>
            </output>
            <output name='mldist'>
    	        <assert_contents>
    	            <has_line_matching expression="^Frog(\s+((\d|\.)+))+\s+$" />
    	            <has_line_matching expression="^Whale(\s+((\d|\.)+))+\s+$" />
    	            <has_line_matching expression="^Cow(\s+((\d|\.)+))+\s+$" />
    	        </assert_contents>
            </output>
            <output name='treefile'>
      	        <assert_contents>
      	            <has_line_matching expression="\(LngfishAu:(\d|\..)+,\(LngfishSA:(\d.)+,.*" />
      	        </assert_contents>
            </output>
            <output name='contree' >
      	        <assert_contents>
      	            <has_line_matching
    	                expression="\(LngfishAu:(\d|\..)+,\(LngfishSA:(\d.)+,.*\)\d+:(\d|\.)+,.*" />
      	        </assert_contents>
            </output>
            <output name='splits.nex'>
      	        <assert_contents>
      	            <has_line line="BEGIN Splits;" />
    	            <has_line line="END; [Splits]" />
      	        </assert_contents>
            </output>
        </test>
        <test>
            <param name='s' value='example.phy' />
            <output name='iqtree'>
    	        <assert_contents>
    	            <has_text_matching expression=".*Human.*Whale.*" />
    	        </assert_contents>
            </output>
            <output name='treefile'>
      	        <assert_contents>
      	            <has_text_matching expression="\(LngfishAu:(\d|\..)+,\(LngfishSA:(\d.)+,.*" />
      	        </assert_contents>
            </output>
        </test>
    </tests>
    <expand macro="help" />
    <citations>
        <citation type="doi">10.1093/molbev/msu300</citation>
        <citation type="doi">10.1093/molbev/mst024</citation>
    </citations>
</tool>
