<?xml version="1.0"?>
<tool id="medaka_tool-classify-variants" name="medaka: Classify variants" version="@TOOL_VERSION@+@WRAPPER_VERSION@" profile="@PROFILE@">
    <description>and write vcf for each type and subtype</description>    
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
        medaka tools classify_variants
        ## optional
        --debug
        '$ap.replace_info'
        ## required
        '$vcf'
        ]]></command>
    <inputs>
        <expand macro="vcf"/>
        <section name="ap" title="Advanced parameters">
            <param argument="--replace_info" type="boolean" truevalue="--replace_info" falsevalue="" label="Replace info tag?" help="Useful for visual inspection of types."/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="">
                <option value="all" selected="true">all</option>
                <option value="del" selected="true">del</option>
                <option value="ins" selected="true">ins</option>
                <option value="mnd" selected="true">mnd</option>
                <option value="mnid" selected="true">mnid</option>
                <option value="mni" selected="true">mni</option>
                <option value="mnp" selected="true">mnp</option>
                <option value="other" selected="true">other</option>
                <option value="snd" selected="true">snd</option>
                <option value="snid" selected="true">snid</option>
                <option value="sni" selected="true">sni</option>
                <option value="snp" selected="true">snp</option>
                <option value="sub" selected="true">sub</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_all" format="tabular" from_work_dir="sample.all.vcf" label="${tool.name} on ${on_string}: all">
            <filter>'all' in ap['out']</filter>
        </data>
        <data name="out_del" format="tabular" from_work_dir="sample.del.vcf" label="${tool.name} on ${on_string}: del">
            <filter>'del' in ap['out']</filter>
        </data>
        <data name="out_indel" format="tabular" from_work_dir="sample.indel.vcf" label="${tool.name} on ${on_string}: indel">
            <filter>'indel' in ap['out']</filter>
        </data>
        <data name="out_ins" format="tabular" from_work_dir="sample.ins.vcf" label="${tool.name} on ${on_string}: ins">
            <filter>'ins' in ap['out']</filter>
        </data>
        <data name="out_mnd" format="tabular" from_work_dir="sample.mnd.vcf" label="${tool.name} on ${on_string}: mnd">
            <filter>'all' in ap['out']</filter>
        </data>
        <data name="out_mnid" format="tabular" from_work_dir="sample.mnid.vcf" label="${tool.name} on ${on_string}: mnid">
            <filter>'mnid' in ap['out']</filter>
        </data>
        <data name="out_mni" format="tabular" from_work_dir="sample.mni.vcf" label="${tool.name} on ${on_string}: mni">
            <filter>'mni' in ap['out']</filter>
        </data>
        <data name="out_mnp" format="tabular" from_work_dir="sample.mnp.vcf" label="${tool.name} on ${on_string}: mnp">
            <filter>'mnp' in ap['out']</filter>
        </data>
        <data name="out_other" format="tabular" from_work_dir="sample.other.vcf" label="${tool.name} on ${on_string}: other">
            <filter>'other' in ap['out']</filter>
        </data>
        <data name="out_snd" format="tabular" from_work_dir="sample.snd.vcf" label="${tool.name} on ${on_string}: snd">
            <filter>'snd' in ap['out']</filter>
        </data>
        <data name="out_snid" format="tabular" from_work_dir="sample.snid.vcf" label="${tool.name} on ${on_string}: snid">
            <filter>'snid' in ap['out']</filter>
        </data>
        <data name="out_sni" format="tabular" from_work_dir="sample.sni.vcf" label="${tool.name} on ${on_string}: sni">
            <filter>'sni' in ap['out']</filter>
        </data>
        <data name="out_snp" format="tabular" from_work_dir="sample.snp.vcf" label="${tool.name} on ${on_string}: snp">
            <filter>'snp' in ap['out']</filter>
        </data>
        <data name="out_sub" format="tabular" from_work_dir="sample.sub.vcf" label="${tool.name} on ${on_string}: sub">
            <filter>'sub' in ap['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="13">
            <param name="vcf" value=""/>
            <output name="out_all">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_del">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_indel">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_ins">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_mnd">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_mnid">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_mni">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_mnp">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_other">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_snd">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_snid">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>                                                       
            <output name="out_sni">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_snp">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
            <output name="out_sub">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 -->
        <test expect_num_outputs="2">
            <param name="vcf" value=""/>
            <section name="ap">
                <param name="replace_info" value=""/>
            </section>
            <output name="out_log">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>            
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

This module classify variants and write VCF for each type and subtype.

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>