<tool id="medaka_variant" name="medaka: Variant" version="@TOOL_VERSION@+@WRAPPER_VERSION@" profile="@PROFILE@">
    <description>calling via neural networks</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
        ## initialize
        @REF_FASTA@  
        ## hard link required      
        ln '${i}' 'sample.bam' &&
        ln '${i.metadata.bam_index}' 'sample.bam.bai' &&

        ## run
        medaka_variant
        -i 'sample.bam'
        -f 'reference.fa'
        #if str($r) != ''
            -r '$r'
        #end if
        -o 'results'
        -s '$s'
        -m '$m'
        -t \${GALAXY_SLOTS:-4}
        $p         
        -b $b
        $d
        $N
        -P $P
        $U
        $S        
        |& tee 'log.txt'
        && ls results -lisa
    ]]></command>
    <inputs>
        <param argument="-i" type="data" format="bam" label="Select input reads" help="Read groups are currently ignored, so the bam should only contain reads from a single sample."/>
        <expand macro="ref_fasta"/>
        <param argument="-r" type="text" value="" optional="true" label="Set region string(s)" help="If not provided, will process all contigs."/>
        <expand macro="model" argument="-s" label="Select medaka model for initial SNP calling from mixed reads prior to phasing"/>
        <expand macro="model" argument="-m" label="Select medaka model for final variant calling from phased reads"/>
        <expand macro="b"/>
        <param argument="-p" type="boolean" truevalue="-p" falsevalue="" label="Create file with phased result?"/>
        <param argument="-d" type="boolean" truevalue="-d" falsevalue="" label="Delete intermediate files?"/>
        <param argument="-N" type="integer" value="14" label="Set threshold for filtering indels in final VCF"/>
        <param argument="-P" type="integer" value="12" label="Set threshold for filtering SNPs in final VCF"/>
        <param argument="-U" type="boolean" truevalue="-U" falsevalue="" label="Avoid filtering of final VCF?"/>
        <param argument="-S" type="boolean" truevalue="-S" falsevalue="" label="Stop after initial SNP calling from mixed reads prior to phasing?"/>
        <param name="out" type="select" multiple="true" optional="false" label="Select out file(s)">
            <option value="probs" selected="true">Probabilites</option>
            <option value="unphased" selected="true">Unphased</option>
            <option value="round" selected="true">Round</option>
            <option value="log">Log</option>
        </param>        
    </inputs>
    <outputs>
        <data name="out_probs" format="data" from_work_dir="results/round_0_hap_mixed_probs.hdf" label="${tool.name} on ${on_string}: Consensus">
            <filter>'probs' in out</filter>
        </data>
        <data name="out_unphased" format="data" from_work_dir="results/round_0_hap_mixed_unphased.vcf" label="${tool.name} on ${on_string}: Unphased">
            <filter>'unphased' in out</filter>
        </data>
        <data name="out_round" format="vcf" from_work_dir="results/round_1.vcf" label="${tool.name} on ${on_string}: Round">
            <filter>'round' in out</filter>
        </data>
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log" from_work_dir="log.txt">
            <filter>'log' in out</filter>             
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="4">
            <param name="i" value="truth_to_ref.bam"/>
            <conditional name="reference_source">
                <param name="reference_source_selector" value="cached"/>
                <param name="ref_file" value="reads"/>
            </conditional>
            <param name="out" value="probs,unphased,round,log"/>
            <output name="out_log">
                <assert_contents>
                    <has_line line="++ All done."/>
                </assert_contents>
            </output>
        </test>
        <!-- #2 default -->
        <test> <!--expect_num_outputs="4"-->
            <param name="i" value="truth_to_ref.bam"/>
            <conditional name="reference_source">
                <param name="reference_source_selector" value="cached"/>
                <param name="ref_file" value="reads"/>
            </conditional>
            <param name="s" value="r103_min_high_g345"/>
            <param name="m" value="r103_min_high_g345"/>
            <param name="b" value="99"/>
            <param name="p" value="true"/>
            <param name="d" value="true"/>
            <param name="N" value="13"/>
            <param name="P" value="11"/>
            <param name="U" value="tue"/>
            <param name="S"  value="true"/>
            <param name="out" value="probs,unphased,round,log"/>
            <output name="out_log">
                <assert_contents>
                    <has_line line="++ All done."/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

The module *medaka_variant* peforms a variant calling via neural networks. The input bam should be aligned to the reference against which to call variants. Note: that although configurable it is unlikely that the model arguments should be changed from their defaults.

**Input**

- reads aligned to reference (BAM)
- reference (FASTA)

**Output**

- Probabilites
- Unphased
- Round
- Log

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>