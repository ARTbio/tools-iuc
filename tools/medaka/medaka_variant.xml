<tool id="medaka_variant" name="medaka: Variant" version="@TOOL_VERSION@+@WRAPPER_VERSION@" profile="@PROFILE@">
    <description>calling via neural networks</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
        @REF_FASTA@

        medaka_consensus
        -i '$i'
        reference.fa
        #if '$r'
            -r '$r'
        #end if
        -o 'results'
        -s '$s'
        -m '$m'
        -t \${GALAXY_SLOTS:-4}
        -p 'phased.vcf'
        -b $batch_size
        $d
        -N $N
        -P $P
        $U
        $S        
        |& tee 'log.txt'
    ]]></command>
    <inputs>
        <param argument="-i" type="data" format="bam" label="Select input reads" help="Read groups are currently ignored, so the bam should only contain reads from a single sample."/>
        <expand macro="ref_fasta"/>
        <param argument="-r" type="txt" value="" optional="true" label="Set region string(s)" help="If not provided, will process all contigs in bam."/>
        <expand macro="model" argument="-s" label="Select medaka model for initial SNP calling from mixed reads prior to phasing"/>
        <expand macro="model" argument="-m" label="Select medaka model for final variant calling from phased reads"/>
        <expand macro="batch_size"/>
        <param argument="-d" type="boolean" truevalue="-d" falsevalue="" label="Delete intermediate files?"/>
        <param argument="-N" type="integer" value="14" label="Set threshold for filtering indels in final VCF"/>
        <param argument="-P" type="integer" value="12" label="Set threshold for filtering SNPs in final VCF"/>
        <param argument="-U" type="boolean" truevalue="-U" falsevalue="" label="Avoid filtering of final VCF?"/>
        <param argument="-S" type="boolean" truevalue="-S" falsevalue="" label="Stop after initial SNP calling from mixed reads prior to phasing?"/>
        <param name="out" type="select" multiple="true" optional="false" label="Select out file(s)">
            <option value="consensus" selected="true">Consensus</option>
            <option value="log">Log</option>
        </param>        
    </inputs>
    <outputs>
        <data name="out_consensus" format="fasta" from_work_dir="results/consensus.fasta" label="${tool.name} on ${on_string}: Consensus">
            <filter>'consensus' in out</filter>
        </data>
        <data name="out_log" format="txt" label="${tool.name} on ${on_string}: Log" from_work_dir="log.txt">
            <filter>'log' in out</filter>             
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="1">
            <param name="" value=""/>
            <conditional name="reference_source">
                <param name="reference_source_selector" value="cached" />
                <param name="ref_file" value="bwa-mem-mt-genome"/>
            </conditional>
            <param name="out" value="consensus,probs,calls,draft,variants,polished,log"/>

            <output name="out_log">
                <assert_contents>
                    <has_line line="Polished assembly written to results/consensus.fasta, have a nice day."/>
                </assert_contents>
            </output>
        </test>     
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

This module peforms a variant calling via neural networks. The input bam should be aligned to the reference against which to call variants. Note: that although configurable it is unlikely that the model arguments should be changed from their defaults.

**Input**

*basecalls*

...

*basecalls*

...

**Output**

*Consensus*

...

*Consensus Probs*

...

*Calls To Draft*

...

*Draft To Consensus*

...

*Variants*

...

*Polished*

...

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>