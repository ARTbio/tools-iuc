<?xml version="1.0"?>
<tool id="medaka_snp" name="medaka: snp" version="@TOOL_VERSION@+@WRAPPER_VERSION@" profile="@PROFILE@">
    <description>to decode probabilities</description>    
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
        medaka snp
        ## optional
        --debug
        #if $op.regions
            --regions '${op.regions}'
        #end if
        --threshold $op.threshold
        $op.verbose
        #if $op.ref_vcf
            --ref_vcf '${op.ref_vcf}'
        #end if
        ## required
        '$ref_fasta'
        #for $current in $inputs
            '$current'
        #end for
        'result.vcf' ## output
        |& tee log.txt
        ]]></command>
    <inputs>
        <param argument="ref_fasta" type="data" format="fasta" label="Select reference sequence"/>
        <param argument="inputs" type="data" format="data" multiple="true" label="Select consensus file(s)"/>

        <section name="op" title="Optional parameters" expanded="true">
            <expand macro="regions_text"/>
            <param argument="--threshold" type="float" value="0.04" min="0.0" max="1.0" label="Set threshold for considering secondary calls" help="A value of 1 will result in haploid decoding."/>
            <param argument="--ref_vcf" type="data" format="vcf" optional="true" label="Select reference vcf"/>
            <expand macro="verbose"/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="">
                <option value="result" selected="true">Result</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_result" format="tabular" from_work_dir="result.vcf" label="${tool.name} on ${on_string}: Result">
            <filter>'result' in op['out']</filter>
        </data>
        <data name="out_log" format="tabular" from_work_dir="log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in op['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="1">
            <param name="ref_fasta" value="reference2.fasta"/> 
            <param name="inputs" value="sample2.hdf5"/>          
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="5"/>
                    <has_line line="##fileformat=VCFv4.1"/>
                </assert_contents>
            </output>            
        </test>
        <!-- #2 -->
        <test expect_num_outputs="2">
            <param name="ref_fasta" value="reference2.fasta"/> 
            <param name="inputs" value="sample2.hdf5"/> 
            <section name="op">
                <param name="threshold" value="0.05"/>
                <param name="verbose" value="true"/>
                <param name="out" value="result,log"/>
            </section>                       
            <output name="out_log">
                <assert_contents>
                    <has_text_matching expression=".+Loaded.+"/>
                </assert_contents>
            </output> 
            <output name="out_result">
                <assert_contents>
                    <has_n_lines n="10"/>
                    <has_line line="##fileformat=VCFv4.1"/>
                </assert_contents>
            </output>              
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

This module decodes probabilities to SNPs.

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>