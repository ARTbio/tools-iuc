<?xml version="1.0"?>
<tool id="medaka_features" name="medaka: Features" version="@TOOL_VERSION@+@WRAPPER_VERSION@" profile="@PROFILE@">
    <description>to create neural network input features</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
        medaka features
        ## optional
        --debug
        --threads \${GALAXY_SLOTS:-4}
        --batch_size $ap.batch_size
        --regions 
        #if $ap.regions_cond.regions_sel == 'custom'
            '$ap.cond_regions.custom'
        #else if
            '$ap.cond_regions.bed'
        #end if
        --chunk_len $ap.chunk_len
        --chunk_ovlp $ap.chunk_ovlp
        #if $ap.truth
        --truth '$ap.truth'
        #end if
         #if $ap.truth_haplotag
            --truth_haplotag $ap.truth_haplotag
        #end if
        --label_scheme $ap.label_scheme
        --feature_encoder $ap.feature_encoder
        #if $ap.feature_encoder_args
        --feature_encoder_args $ap.feature_encoder_args
        #end if
        ## required
        '$bam' ## bam
        results ## outputs
        |& tee log.txt
        ]]></command>
    <inputs>
        <param argument="bam" type="data" format="bam" multiple="true" label="Select input alignments"/>
        <!-- todo multiples? -->
        <section name="ap" title="Advanced parameters">
            <expand macro="batch_size"/>            
            <expand macro="regions"/>
            <expand macro="chunk_len"/>
            <expand macro="chunk_ovlp" default="1000"/>


            <param argument="--truth" type="data" format="bam" optional="true" label="Select file with truth aligned to ref" help="Feature creation for training."/>
            <param argument="--truth_haplotag" type="text" value="" optional="true" label="Set haplotype of alignments for polyploidy labels" help="Two-letter tag"/>
            <param argument="--label_scheme" type="select" label="Set labelling scheme">
                <option value="HaploidLabelScheme" selected="true">HaploidLabelScheme</option>
                <option value="DiploidLabelScheme">DiploidLabelScheme</option>
                <option value="DiploidZygosityLabelScheme">DiploidZygosityLabelScheme</option>
                <option value="RLELabelScheme">RLELabelScheme</option>
            </param>
            <param argument="--label_scheme_args" type="text" value="" optional="true" label="Set label scheme key-word arguments" help="e.g. KEY1=VAL1 KEY2=VAL2a,VAL2b,... KEY3=..."/>
            <param argument="--feature_encoder" type="select" label="Set featureEncoder used to create the features">
                <option value="CountsFeatureEncoder" selected="true">CountsFeatureEncoder</option>
                <option value="HardRLEFeatureEncoder">HardRLEFeatureEncoder</option>
                <option value="SoftRLEFeatureEncoder">SoftRLEFeatureEncoder</option>
                <option value="SymHardRLEFeatureEncoder">SymHardRLEFeatureEncoder</option>
            </param>
            <param argument="--feature_encoder_args" type="text" value="" optional="true" label="Set feature encoder key-word arguments" help="e.g. KEY1=VAL1 KEY2=VAL2a,VAL2b,... KEY3=..."/>
            <param name="out" type="select" multiple="true" optional="false" label="Select output file(s)" help="">
                <option value="result" selected="true">Result</option>
                <option value="log">Log</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_log" format="tabular" from_work_dir="log.txt" label="${tool.name} on ${on_string}: Log">
            <filter>'log' in ap['out']</filter>
        </data>
    </outputs>
    <tests>
        <!-- #1 default -->
        <test expect_num_outputs="1">
            <param name="" value=""/>
            <output name="out_log">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
        </test>
        <!-- #2  -->
        <test expect_num_outputs="2">
            <param name="bam" value=""/>
            <section name="ap">
                <param name="batch_size" value="101"/>
                <conditional name="regions_cond">
                    <!-- ! -->
                    <param name="regions_sel" value="custom"/>
                    <param name="custom" value=""/>
                    <param name="regions_sel" value="bed"/>
                    <param name="bed" value=""/>
                    <!-- ! -->
                </conditional>
                <param name="chunk_len" value="10001"/>
                <param name="chunk_ovlp" value="1001"/>
                <param name="truth" value=""/>
                <param name="truth_haplotag" value=""/>
                <!-- ! -->
                <param name="label_scheme" value="DiploidLabelScheme"/>
                <param name="label_scheme" value="DiploidZygosityLabelScheme"/>
                <param name="label_scheme" value="RLELabelScheme"/>
                <!-- ! -->
                <param name="label_scheme_args" value=""/>
                <param name="feature_encoder" value="HardRLEFeatureEncoder"/>
                <param name="feature_encoder" value="SoftRLEFeatureEncoder"/>
                <param name="feature_encoder" value="SymHardRLEFeatureEncoder"/>
                <param name="feature_encoder_args" value=""/>
                <param name="out" value="result,log"/>
            </section>
            <output name="out_log">
                <assert_contents>
                    <has_n_lines n=""/>
                    <has_line line=""/>
                    <has_text_matching expression=""/>
                    <has_size value="" delta=""/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

@WID@

...

**Input**

...

::

    Courier new text

**Output**

...

.. class:: infomark

**References**

@REFERENCES@
    ]]></help>
    <expand macro="citations"/>
</tool>