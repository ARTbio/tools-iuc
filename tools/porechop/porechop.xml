<tool id="porechop" name="porechop" version="0.2.3">
    <description>Adapter trimmer for Oxford Nanopore reads</description>
    <requirements>
        <requirement type="package" version="0.2.3_seqan2.1.1">porechop</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    porechop
    -i $input
    -o $output
    --format '$format$'
    --barcode_threshold '$barcode_threshold'
    --barcode_diff '$barcode_diff'
    $require_two_barcodes
    $untrimmed
    $discard_unassigned
    --adapter_threshold '$adapter_threshold'
    --check_reads '$check_reads'
    --scoring_scheme '$scoring_scheme'
    --end_size '$end_size'
    --min_trim_size '$min_trim_size'
    --extra_end_trim '$extra_end_trim'
    --end_threshold '$end_threshold'
    $no_split
    $discard_middle
    --middle_threshold '$middle_threshold'
    --extra_middle_trim_good_side '$extra_middle_trim_good_side'
    --extra_middle_trim_bad_side '$extra_middle_trim_bad_side'
    --min_split_read_size '$min_split_read_size'

    #if $mode.select_mode == 'info':
        info
        '$input_file'
        #if $mode.tsv:
            '$mode.tsv'
        #end if
        > out.txt
    #else:
        image
        '$input_file'
        'out.$mode.output_format'
        #if $mode.height:
            --height '$mode.height'
        #end if
        #if $mode.width:
            --width '$mode.width'
        #end if
    #end if
    ]]></command>
    <inputs>
        <param name="input_file" type="data" format="tabular" label="Graphical Fragment Assembly" />
        <conditional name="mode">
            <param name="select_mode" type="select" label="Info or Image">
                <option selected="True" value="info">Info</option>
                <option value="image">Image</option>
            </param>
            <when value="info">
                <param argument="--tsv" type="boolean" checked="false" truevalue="--tsv" falsevalue="" label="Output the information in a single tab-delimited line starting with the graph file"/>
            </when>
            <when value="image">
                <param argument="--height" type="integer" min="1" value="1000" optional="True" label="Image height (default: 1000). If only height or width is set, the other will be determined automatically. If both are set, the image will be exactly that size."/>
                <param argument="--width" type="integer" min="1" optional="True" label="Image width (default: not set). If only height or width is set, the other will be determined automatically. If both are set, the image will be exactly that size."/>
                <param name="output_format" type="select" label="Produce jpg, png or svg file?">
                    <option selected="True" value="jpg">.jpg</option>
                    <option value="png">.png</option>
                    <option value="svg">.svg</option>
                </param>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="outfile" format="auto" from_work_dir="out.*" label="${tool.name} on ${on_string}: Assembly Graph Image"/>
    </outputs>
    <tests>
        <test>
            <param name="input_file" ftype="tabular" value="gfa.tabular"/>
            <param name="select_mode" value="image"/>
            <output name="outfile" ftype="data" file="out.jpg" compare="sim_size" delta="70000"/>
        </test>
        <test>
            <param name="input_file" ftype="tabular" value="gfa.tabular"/>
            <param name="select_mode" value="image"/>
            <param name="height" value="100"/>
            <param name="width" value="100"/>
            <param name="output_format" value="png"/>
            <output name="outfile" ftype="data" file="out.png" compare="sim_size" delta="120000"/>
        </test>
        <test>
            <param name="input_file" ftype="tabular" value="gfa.tabular"/>
            <param name="select_mode" value="info"/>
            <param name="tsv" value="True"/>
            <output name="outfile" ftype="data" file="out.txt" compare="sim_size" delta="100"/>
        </test>
    </tests>
    <help><![CDATA[
Bandage is a GUI program that allows users to interact with the assembly graphs made by de novo assemblers such as Velvet, SPAdes, MEGAHIT and others.
De novo assembly graphs contain not only assembled contigs but also the connections between those contigs, which were previously not easily accessible. Bandage visualises assembly graphs, with connections, using graph layout algorithms. Nodes in the drawn graph, which represent contigs, can be automatically labelled with their ID, length or depth. Users can interact with the graph by moving, labelling and colouring nodes. Sequence information can also be extracted directly from the graph viewer. By displaying connections between contigs, Bandage opens up new possibilities for analysing and improving de novo assemblies that are not possible by looking at contigs alone.
    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btv383</citation>
    </citations>
</tool>
